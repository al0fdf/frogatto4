{
id: "effects_attache_glow",
prototype: ["effects_attache"],



properties: {
#-------------------------- vars --------------------------#
	is_currently_on: { type: "bool", default: true },

	external_process_callback: { type: "function(decimal) -> commands", init: "def(value) -> commands null" },
	

#-------------------------- cosmetics --------------------------#
	core_display_radius: "decimal :: 100",
	base_alpha: { type: "decimal", default: 80 },

	flicker_type: { type: "enum { sputter, window_light }", init: "enum sputter" },
	scale_factor: { type: "decimal", default: 1.0 },

	amplitude_based_on_type: "decimal :: switch(flicker_type,
											enum sputter, (sin( cycle*(3.6 + 1d2) ) * 7)/0.36,
											enum window_light, (sin( cycle * 2.5 ) * 3 + sin( cycle * 4 ) * 2 + sin( cycle * 6.5 ) * 2)/0.36,
											0)",

	graphics: { type: "enum { firey, soft_glow_small, soft_glow_big, soft_glow_green, gazer_flare, pink_flare }",  init: "enum firey" },
	set_graphic: "commands :: set(animation, switch(graphics,
							enum soft_glow_small,		'soft_glow_small',
							enum soft_glow_big,			'soft_glow_big',
							enum soft_glow_green,		'soft_glow_green',
							enum gazer_flare,			'gazer_flare',
							enum pink_flare,			'pink_flare',
														'firey'
					))",

#-------------------------- logic --------------------------#
	do_setup: "commands :: [
								initialize_position,
								set_graphic,
								set(scale, scale_factor),
							]",

	turn_on: "commands ::	[
								set(is_currently_on, true),
								add_object(light_circular),
							]",
	turn_off: "commands :: [
								set(is_currently_on, false),
								set(relative_x, 0),
								set(relative_y, 0),
								set(alpha, 0),
								remove_object(light_circular),
							]",
	
	process_being_on: "[
							external_process_callback(base_alpha + amplitude),
							set(alpha, round(base_alpha + amplitude)),
							
							set(light_circular.scale, light_scale_factor),
							set(relative_x, relative_pos_default.mid_x + 1d(amplitude_scaled*2) - amplitude_scaled),
							set(relative_y, relative_pos_default.mid_y + 1d(amplitude_scaled*2) - amplitude_scaled),
						]	where amplitude_scaled = amplitude / 10.0
							where round = lib.math.round
							where amplitude =  amplitude_based_on_type",

	light_scale_factor: "decimal :: (pixel_size / 255.0 ) * fudge_factor
		where fudge_factor = 1.4
		where pixel_size = lib.math.round( max(0, base_alpha + amplitude_based_on_type))
		",

	light_circular: {
		type: "obj light_source_attache",
		persistent: false,
		init: "object('light_source_attache', mid_x, mid_y, {
			_sprite_type: enum eased_halo,
			time_to_die: 0,
			parent: me,
			custom_relative_pos_default: {mid_x: 0,	mid_y: 0},
			scale: 1.0,
			variable_name: 'light_circular',
		})",
	},

},

on_process: "if(is_currently_on, process_being_on)",



animation: [{
		"@base": true,
		frames: 1,
		duration: -1,
		blend:["src_alpha","one"],
		no_remove_alpha_borders: true,
	},{
		id: "firey",
		image: "props/glow2.png",
		rect: [0,0,63,63],
	},{
		id: "soft_glow_small",
		image: "effects/silhouette/soft-glow-small.png",
		rect: [0,0,63,63],
	},{
		id: "soft_glow_big",
		image: "effects/silhouette/soft-glow.png",
		rect: [0,0,255,255],
	},{
		id: "soft_glow_green",
		image: "effects/silhouette/soft-glow-green.png",
		rect: [0,0,255,255],
	},{
		id: "gazer_flare",
		image: "effects/silhouette/gazer-flare.png",
		rect: [0,0,255,255],
	},{
		id: "pink_flare",
		image: "effects/silhouette/pink-flare.png",
		rect: [0,0,255,255],
	}],
}
