{
id: "effects_attache",
prototype: ["transient_object"],
is_strict: true,
activation_border: 5000,
serializable: false,



properties: {
#-------------------------- constructors/destructors --------------------------#
	/*
		Major warning here - our constructor runs *not only* when the object is first created, but will also be run every time the object is re-added to the game - if it's i.e. an object like a fiery glow that gets removed and added to an object.  The destructor will fire every time it's ripped off the original object, as well - we need to make sure nothing we fire in the constructor is a true 'can only happen once in an object's lifetime' command.  Currently we use no such things, so if they ever need to be added, we'll need to add some sort of guard statement to keep them from firing twice (all such setup events should be triggered in separate execution frames so we should be able to safely assume the side-effects from an earlier execution (such as a bool indicating we've previously been set up) will be visible to the later execution frame.
	*/

	hittable_obj_constructor: "[attach_to_spawner, do_setup, bind_command(def() turn_on)]",
	hittable_obj_destructor: "additional_death_cleanup",

	//double_invocation_check: "commands :: if(not already_spawned, set(already_spawned, true))
	//already_spawned: { type:"bool", default: false },

	debug_output_ea: "bool :: false",

	root_parent_object: "obj transient_object ::
		if(me._parent_obj is obj effects_attache, me._parent_obj.root_parent_object, me._parent_obj)
	",

#-------------------------- signature --------------------------#
	/*
		A curious issue we need to work around is being able to re-establish references in the parent object.   Typically a parent object will have some explicit variables where we (the child attache) are declared.  These serve primarily as a way for the parent to have a 'lever/knob' - some way to actually call properties on the child and adjust them (the most common case being turning the child on/off), but also things like varying the intensity of lights, etc.
		
		If at any point, we're removed from the parent and passed to a new object, if we're ever passed back to an object of the same type as our parent, the tacit assumption is that we're not meant to be an additional attache, but we're actually meant to -be- that pre-existing one.  For example, consider the object transformations on the common idiom of swallowing an enemy, and spitting it back out.
		
		If there was a `glow_bug` that has a `light_source_attache` attached to it, it would get turned into a `glow_bug.thrown` when spat out (thrown versions establish no attaches of their own, by convention, and spare us the rather high code duplication burden of doing so, by assuming they'll inherit the same attaches the real version had, and thus, get the same VFX/SFX).   These attaches would then, as a third step, get passed back to the restored `glow_bug` when it flips back upright, which is a brand-new object.
		
		But this means this new parent basically has bogus references - its references (if we didn't avoid spawning them via `_constructed: true`) would be duplicate copies of the same sort of effects, and they'd be pointing at a brand new set created with the new parent.  The old attaches would be attached to the new parent, but their references would be orphaned.
		
		
		In order to pass these along, we need some kind of indication - some sort of obvious 'tag' on the objects, that provides a clear and unambiguous 1-to-1 association between "a variable in the parent" and "an attache referenced by that variable".   The most clear and direct way to do that would be to pass in the actual name of the variable, which is guaranteed to be unique within that context.
		
		It's a little tedious, but it should actually be slightly robust in terms of testing - if these are ever missing, we don't get any useful errors, which sucks.   If they're "present but incorrect", though, we'll get an excellent slap-on-the-wrist that we've tried to assign something to an invalid variable name.


		NOTE:  if you've got i.e. a thrown object that has particles, yes, this means you'll need to have an instance of the exact same attache in the thrown version.


		TODO:  in the distant future, it'd be nice to refactor this whole system; this problem here is caused because we don't have introspection in the engine to map over an object's properties, and find one that 'matches' a given child.  Right now, objects are stored in two separate places in a parent - in direct variable references, and in an `_effects_attaches` array.  If we eliminated this, and made `_effects_attaches` into a dictionary, then we actually -could- map over the keys.  We could do a simple map over them to get the key when we were initially created, and then have that key from then on to re-assign ourselves later.   For now, we will type them in manually just to get this fixed, quickly.


	*/
	variable_name: { type: "string|null" },
	
	possibly_restore_parent_reference: "commands :: [
		if(me.variable_name,[
			set(_parent_obj[variable_name], me)
		])
	]",




#-------------------------- vars --------------------------#
		/*
			note;  time_to_die is *not* a value for "how long after creation this thing self-deletes".  That's scheduled_death_at.  Rather, time_to_die is a setting that describes how long we delay object deletion after this object considers itself 'dead' - some particle systems need to stop spawning particles, and only delete themselves after all the particles have had time to expire.
		*/
	time_to_die: { type: "int", dynamic_initialization: true },
	scheduled_death_at: { type: "int|null", default: null },
	recorded_transfer_at: { type: "int|null", default: null },
	still_failing_debug_check: { type: "bool", default: false },
	
	custom_relative_pos_default: { type: "{mid_x: decimal, mid_y: decimal}|null", default: null },
#-------------------------- connections --------------------------#
	_parent_obj: "(obj transient_object <- me.parent)
						asserting not (me.parent = null) | 'An object of type:' + me.type + ' and _addr:' + addr(me) + ' ended up without a parent object.  The design of this prototype demands that these objects always have a parent, period.  They need one upon creation, and if a parent dies, it must immediately remove all child objects of this type.'",
	
	attach_to_spawner: "commands :: if(not me in _parent_obj._effects_attaches, add(_parent_obj._effects_attaches, [me]))",
	remove_from_spawner: "commands ::	if(me in _parent_obj._effects_attaches,
											; set(_parent_obj._effects_attaches,
												filter(_parent_obj._effects_attaches, value != me)
											)
										)",

#-------------------------- cosmetics --------------------------#
	relative_pos_default: "{mid_x: decimal, mid_y: decimal} :: if(custom_relative_pos_default, custom_relative_pos_default, { mid_x: 0, mid_y: 0 })",
	initialize_position: "commands :: execute(me, [
						set(relative_x, relative_pos_default.mid_x),
						set(relative_y, relative_pos_default.mid_y),
					])",

#-------------------------- logic --------------------------#
	additional_death_cleanup: "commands :: null",

		//this is exactly like `schedule_death_cleanup`, but we reserve it for cases where we might invoke a transfer, but we really for-sure want this effects_attache to get cleaned up and removed.
	schedule_forced_death_cleanup: "commands :: execute(me, [
										set(currently_forcing_death, true)
										;
										schedule_death_cleanup
									])",
	
		/*
			"What the hell is this?"  -- Remember that a primary use case for effects_attaches is stuff like particles which can't end abruptly.  So there pretty much *isn't* an API call for terminating them instantly - THE standard way we remove them is deferred rather than immediate, and this is it. 
		*/
	schedule_death_cleanup: "commands :: execute(me, [
								turn_off,
								set(always_active, true),

								set(me.scheduled_death_at, me.cycle+time_to_die),
								if(debug_output_ea, debug('scheduled death of ${me.type} at ${cycle+time_to_die}')),

								schedule(time_to_die, ; [
									/*								
										We can basically 'cancel' our death by anulling this scheduled_death_at value.  We want to do this if we're being transferred rather than our parent actually dying; this basically is our 'signal' that the death was a transfer.  We could do that with boolean flag, but we need to preserve the metadata of *which* death was being cancelled, because if we do a transfer and then the transferee gets killed, we want the final death to still be able to clean us up.
										
										Because of this we use a second numerical value; `recorded_transfer_at`.  It uses the same numerical calculation to generate the timestamp, so if it's the same as any `scheduled_death_at`, that means that particular death was a transfer, not an actual destruction.
										
										---
										
										One thing to be aware of is that this is designed to handle situations where the parent immediately kills itself.  A very common pattern we use is one where at the very moment of death for a 'thrown' object, we respawn one of the original objects that held it in place of where it currently sits.  We set all relevant variables for that object to be the same as the thrown object.  We do this to ensure that any special death code for the parent correctly gets run.
										
										As a design strategy, if this really breaks down, we still can't directly execute that code because of its calling context, but we can at least perhaps ditch the 'soft' part of this pattern - we still assume that the new object might want to cancel its death or something, and respawn with its old attaches.  If it becomes necessary, perhaps we'll switch to a 'hard' setup where if you're flagged for death, you just kill all your attaches, period.
									*/
								 
									if(debug_output_ea,
										debug('considering scheduled death of ${me.type} at ${me.cycle} with scheduled value ${me.scheduled_death_at} and transfer time ${recorded_transfer_at}')
									),
									if(me.scheduled_death_at = me.cycle,
										if(me.recorded_transfer_at != me.cycle or currently_forcing_death, [
											additional_death_cleanup ;
											remove_from_spawner,
											remove_object(me)
										],[
											set(me.scheduled_death_at, null),
										])
									)
								])
							]) asserting me is obj effects_attache",

	do_setup: "commands :: [initialize_position]",
	turn_on: "commands :: null",
	turn_off: "commands :: null",
	
	is_alive: "bool :: scheduled_death_at = null and (not currently_forcing_death) and if(recorded_transfer_at != null, (scheduled_death_at != recorded_transfer_at), true)",
	
	currently_forcing_death: { type: "bool", default: false },

	debug_check: "if(scheduled_death_at != null, set(still_failing_debug_check, true)
	
		asserting (not (still_failing_debug_check = true and scheduled_death_at = null)) and (not (scheduled_death_at = null and _parent_obj.hitpoints < 0)) | q(An effects object of type:' + me.type + ' and _addr:' + addr(me) + ' has become orphaned; if its parent dies and it doesn't have a cleanup scheduled, something has gone quite wrong.  Parents are supposed to always force these to die)
	 
	 )",
	 
#-------------------------- core behavior --------------------------#
	on_process_wrapper: "def(commands do_process_handling) -> commands
							do_process_handling
						",

	handle_processing: "commands :: on_process_wrapper( [handle_specialized_processing] )",
	handle_specialized_processing: "commands :: null",
},

on_process: "handle_processing",


timer_frequency: 10,
on_timer: "debug_check",


on_being_added: "
	/*
		Unlike the transient object constructor - we DO want to always try running do_setup in the particular case of being added to the level (i.e. after being spat back out.  The rest can be guarded and try to only run once, but do_setup should run every time, and anything that needs to happen only once should go in the proper constructor.
	*/
	[
		proto_event('transient_object', 'being_added'),
		do_setup,
	]",


animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 86, y: 73, w: 0, h: 0,
	duration: -1,
},

}
