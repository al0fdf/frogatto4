{
id: "map_selector",
zorder: "@include data/zorder.cfg:in_front_of_everything",
prototype: ["player_controlled"],
is_human: true,
always_active: true,
hidden_in_game: true,
properties: {
	team: "'player'",
	position: "min(size(accessible_map_points)-1, max(0, _place))",
	prior_position: "index(map_points, find(map_points, value.level_filename = _came_from_level))",
	
	//We multiply by two for position because frogatto scales up the graphics by two.
	map_points: "[{x: int, y: int, level_filename: string, level_prettyname: string}] ::
				[	{ x:160, y:400, level_filename:'frogatto-grotto.cfg',					level_prettyname:~Frogatto Grotto~			},
					{ x:234, y:361, level_filename:'to-nenes-house.cfg',					level_prettyname:~Nene's House~				},
					{ x:303, y:334, level_filename:'secluded-hut.cfg',						level_prettyname:~Secluded Hut~				},
					{ x:416, y:404, level_filename:'crevice-village.cfg',					level_prettyname:~Crevice Village~			},
					{ x:490, y:350, level_filename:'foreboding-forest.cfg',					level_prettyname:~Foreboding Forest~		},
					{ x:520, y:295, level_filename:'musty-mine.cfg',						level_prettyname:~Musty Mine~				},
					{ x:465, y:315, level_filename:'rustic-route.cfg',						level_prettyname:~Rustic Route~				},
					{ x:494, y:270, level_filename:'shady-shortcut.cfg',					level_prettyname:~Shady Shortcut~			},
					{ x:456, y:248, level_filename:'the-empty-place.cfg',					level_prettyname:~Grisly Grotto~			},
					{ x:390, y:260, level_filename:'perilous-precipice.cfg',				level_prettyname:~Perilous Precipice~		},
					{ x:380, y:305, level_filename:'ravenish-ravine.cfg',					level_prettyname:~Ravenish Ravine~			},
					{ x:410, y:285, level_filename:'bon-bosque.cfg',						level_prettyname:~Bon Bosque~				},
					{ x:330, y:245, level_filename:'watery-alley.cfg',						level_prettyname:~Watery Alley~				},
					{ x:380, y:200, level_filename:'milgrams-basement-junction.cfg',		level_prettyname:~Milgram's Castle~			},
					{ x:360, y:100, level_filename:'milgrams-throne-room-entrance.cfg',		level_prettyname:~Milgram's Throne Room~	}]",

	accessible_map_points:	"if(_player != null,
								if(size(_player.levels_visited) > 0,
									filter(map_points, value.level_filename in _player.levels_visited),
									map_points
								),
								map_points
							)",

	_place: {type: "int", default: 0, persistent: false},
	_player: {type: "obj player_controlled | null", persistent: false},
	_came_from_level: {type: "string", default: "frogatto-grotto.cfg" },
	exempt_from_dying_whilst_falling_rules_for_a_cutscene: { type: "bool", default: true },
},

on_start_level: "fire_event('do_setup')",


on_do_setup: "[
		//set(alpha,0),
		if(prior_position < size(accessible_map_points) and prior_position >= 0, 
			set(_place, prior_position),
			set(_place, 0)
		),
		set(x, (accessible_map_points[position].x*2)), set(y, (accessible_map_points[position].y*2)),
		map(accessible_map_points, spawn('text_controller', value.x*2, value.y*2 + 40, {txt:value.level_prettyname, align:'center'})),
		spawn(type+'.arrow',mid_x,mid_y, {parent: me})
	]",
on_ctrl_down: "fire_event('ctrl_left')",
on_ctrl_up: "fire_event('ctrl_right')",
on_ctrl_right: "[set(_place,_place+1), sound('MenuCursorMove.ogg')]",
on_ctrl_left: "[set(_place,_place-1), sound('MenuCursorMove.ogg')]",
on_ctrl_tongue: "[
		set(control_lock, []),
		screen_flash([255,255,255,0], [0,0,0,5], 50),
			
		schedule(50, [
			if(_player != null, [
				//Set the player's position to our position to give it a valid position
				//for the brief time between adding it and teleporting it as a workaround
				//for this causing the engine some troubles.
				set(_player.x, x),
				set(_player.y, y),
				set(_player.alpha, 0),
				execute(_player, schedule(1, set(brightness, 255))),
				add_object(_player),
				teleport(accessible_map_points[position].level_filename,'world_map_pedestal','instant'),
			],
			[
				spawn_player('frogatto_playable', 0, 0, 1),
				teleport(accessible_map_points[position].level_filename,'world_map_pedestal','instant'),
			]),
	
			sound('MenuConfirm.ogg'),
			screen_flash([255,255,255,255], [0,0,0,-5], 50),
			set(control_lock, null)
		])
	]",
on_ctrl_jump: "fire_event('ctrl_tongue')",

"on_mouse_up*": "
	if(accessible_map_points[position] = chosen, 
		fire_event('ctrl_tongue'),
		[set(_place, index(accessible_map_points, chosen)), sound('MenuCursorMove.ogg')]
		) where chosen = choose(accessible_map_points, -lib.math.length([arg.mouse_x/2, arg.mouse_y/2], [value.x,value.y]))",

on_process: "[
				if(_place < 0,
					set(_place, 0)
				),
				if(_place > size(accessible_map_points)-1,
					set(_place, size(accessible_map_points)-1)
				),
				set(mid_x, (mid_x*4 + accessible_map_points[position].x*2) / 5),
				set(mid_y, (mid_y*4 + accessible_map_points[position].y*2) / 5)
			]",


animation: {
	id: "normal",
	image: "characters/stand_in_selector.png",
	rect: [0,0,15,15],
},
object_type: [
	{
		id: "arrow",
		ignore_collide: true,
		zorder: "@include data/zorder.cfg:in_front_of_everything",
		
		on_end_anim: "set(animation,animation)",
		on_process:	 "[
							set(relative_y, -20 + 4*sin(cycle*10)),
							set(relative_x,0),
							set(brightness, int(355 + 255*sin(cycle*8)))
						
						]",
		
		animation: {
			id: "normal",
			image: "gui/arrow-menu-cursor.png",
			rect: [0,0,23,23],
			frames: 8,
			frames_per_row: 4,
			duration: 3,
			scale: 3,
		},
	},],

}
