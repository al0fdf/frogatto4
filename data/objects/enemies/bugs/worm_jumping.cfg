{
id: "worm_jumping",
hitpoints: 400,
is_strict: true,
zorder: "@include data/zorder.cfg:player",
prototype: ["hittable"],
object_level_collisions: true,
properties: {


#-------------------------- constructors --------------------------#
	epihittable_obj_constructor: "commands ::	[
													create_segments,
													add_particles('particles'),
													animation('invisible'),
													schedule(50+1d100, fire_event('begin_burrow_up')),
													set(fall_through_platforms,-1),
												]",
	
#for now, we just kill everything at once;  I poked at some delayed-action timing things, and they're a bit hairy - and we don't want them anyways because we're going to move to killing one segment at a time.
	epihittable_obj_destructor: "commands ::	[
													map(_segments, set(value.hitpoints,0)),
													set(_segments, [])
												]",


#-------------------------- hittable metadata --------------------------#
	team: "'evil'",
	attack_damage: "2",
	attack_cooldown: "10",
	points_value: "14",
	basic_type: "me.type",
	frogourmet_tag: "me.basic_type",
	taxonomy: "TaxonomyType :: enum bug",
	death_fx_type: "'milgramen'",
	acquirable_item_drop_value: "16",	
	
	title: "~Voorgelbek~",
	description: "~Most worms wait until you’re dead to eat you. Voorgelbeks ain’t got time for that.~",
	taste: "~Too covered in rocks to tell.~",				
		
#-------------------------- hittable overrides --------------------------#
	handle_flinch: "def(obj hittable collide_with) -> commands null",
	handle_knockback: "def(obj hittable collide_with) -> commands null",
	
	handle_special_damage_response: "def(DamageType damage_type, int final_damage_amount, bool will_die) -> commands execute(me,
			map(_segments, if(not value in live_segments_at_this_hp(me.hitpoints - final_damage_amount) and value.hitpoints > 0, value.trigger_death))
		)",
		
	/*
		Special immunity to impale damage;  these guys almost always spawn in spikes, and need to not die to them.
		Also a special weakness to impact damage, particularly due to a special fight where there are crates available to attack them with.
	*/
	handle_custom_damage_type_modifications: "def(DamageType damage_type, int amount) -> int|null
		if(damage_type = enum impale or damage_type = enum lacerate,
			0,
			if(damage_type = enum impact,
				amount * 4,  //functionally means 2 shots to kill
			 	null
			 )
		)
	",		
		
#-------------------------- core behavior settings --------------------------#

		//pick a random position using x_target.  Check, linearly, to see if it, and evenly divisible points between it and the "desired random position" are standable; pick the first one that actually is.  If we don't find _anything_, then fall back to our current position; i.e. respawn exactly where we last burrowed.
	safe_xy_target: "{x: decimal, y: decimal} :: if(potential_point != null, potential_point, {x:mid_x, y:mid_y})
		where potential_point = find(map(range(10), find_floor(xval - (value*(xval-mid_x)/10), y_target-300, 500)), value != null)
		where xval = x_target",

	x_target: "min(_x_bound,_x2_bound) + 1d(abs(_x_bound-_x2_bound))",
	y_target: "_desired_height - (_desired_height%8)",
	set_rotation: "set(rotate, sign(velocity_x)*(90 + 90*decimal(min(max(velocity_y,-1000),1000))/1000))",
	delayed_rotate: "decimal :: decimal(if(size(_oldrotate)>=4, _oldrotate[ size(_oldrotate)-4 ], rotate))",
	segment_count: "def(decimal hp) -> int lib.math.round(6*hitpoint_proportion(me.hitpoints))",


	create_segments: "[set(_segments, new_set_of_segments), schedule(1, bind_command(def() map(_segments, value.attach_to_spawner)))]
			where new_set_of_segments = map(range(segment_count(hitpoints)), object('worm_jumping.segment',midpoint_x,midpoint_y,{facing: facing, parent: me, _index_in_parent: index}))",
	
	_last: "def([obj worm_jumping.segment] list) -> obj worm_jumping.segment|null if(size(list), list[size(list)-1])",
	
	live_segments_at_this_hp: "def(int hitpoint_count) -> [obj worm_jumping.segment] _segments[0: segment_value_of_this_many_hp(hitpoint_count)]",
	segment_value_of_this_many_hp: "def(int hitpoint_count) -> int //just the 'worth' of one segment - i.e. how many hp does it take to kill a segment?
			min(size(_segments), lib.math.round(size(_segments) * hitpoint_proportion(hitpoint_count)))", 
	hitpoint_proportion: "def(decimal portion) -> decimal decimal(portion)/decimal(me.max_hitpoints)",

	
#-------------------------- vars --------------------------#
	_segments: { type: "[obj worm_jumping.segment]", default: [] },
	_oldrotate: { type: "[decimal]", default: [] },
	_x_bound: { type: "int", editor_info: { type: "x", value: "mid_x-(7*32)" } },
	_x2_bound: { type: "int", editor_info: { type: "x", value: "mid_x+(7*32)" } },
	_desired_height: { type: "int", editor_info: { type: "y", value: "midpoint_y" } },
	_leaptime: { type: "int", default: 0 },
},

on_rustle: "play_sound__falloff('gravel-sift')", 

on_remove_segment: "if(last_segment != null, [remove_object(last_segment), last_segment.detach]) where last_segment = _last(filter(_segments, value in level.chars))",
on_lose_segment: "if(last_segment != null, [last_segment.trigger_death, set(_segments, _segments[0: size(_segments)-1])]) where last_segment = _last(_segments)",

on_collide_level: "if(animation in ['leap'] and abs(cycle - _leaptime) > 10, [set(velocity_y,0), set(velocity_x,0), fire_event('begin_burrow_down')])",

#-------------------------- underground_handlers --------------------------#
on_finish_burrowing_down: "[animation('invisible'),set(particle_systems['particles'].spawn_rate, 0),schedule(50+1d100, fire_event('begin_burrow_up'))]",
on_end_invisible_anim: "animation('invisible')",

#-------------------------- burrow-down handlers --------------------------#
on_begin_burrow_down: "[set(particle_systems['particles'].spawn_rate, 1000), set(velocity_y,20), animation('burrow_down'), schedule(40, fire_event('finish_burrowing_down')),
			map(_segments, schedule(index*4, fire_event('remove_segment')))]",
on_end_burrow_down_anim: "animation('burrow_down')",

#-------------------------- burrow-up handlers --------------------------#
on_begin_burrow_up: "[set(_oldrotate,[]),schedule(60,fire_event('begin_leap')), set(particle_systems['particles'].spawn_rate, 1000),set(rotate,0),set(velocity_y,0), animation('burrow_up'), 
			[[set(midpoint_x, target.x), set(midpoint_y, target.y)] where target = safe_xy_target]]",
on_end_burrow_up_anim: "animation('burrow_up')",

#-------------------------- leap handlers --------------------------#
on_begin_leap: "[
			
			map(range(segment_count(hitpoints)), schedule(2*index, [add_object(_segments[index]), _segments[index].attach, fire_event(_segments[index], 'process' )]) ),
			set(_leaptime, cycle),
			set(velocity_y,-1000),
			set(velocity_x,-1d250 * pos_proportion)
				/*
					This `pos_proportion` is normalized to -1.0 <-> 1.0.  The *2 -1 bit transforms it from 0.0 <-> 1.0.
					The simple trick we're doing here is we want to make the worm jump towards the center; the worm picks its direction based on what side it's on.
				*/
				where pos_proportion = ((mid_x - min(_x_bound,_x2_bound))/decimal(abs(_x2_bound - _x_bound)) * 2) - 1,

			set(particle_systems['particles'].spawn_rate, 0),
			animation('leap')
			]",
on_end_leap_anim: "animation('leap')",
on_process_leap: "[set_rotation,add(_oldrotate, [rotate])]",
editor_info: {
	category: "enemies, cave",
},
animation: [
	{
		image: "enemies/worm-burrowing.png",
		pad: 0,
		body_area: "all",
		accel_y: 0,
		rect: [0,64,31,95],
		feet_x: 16,
		feet_y: 32,
		id: "burrow_up",
		frames: 4,
		events: "1:2:3:4:rustle",
		duration: 5,
	},
	{
		image: "enemies/worm-burrowing.png",
		pad: 0,
		body_area: "all",
		accel_y: 0,
		rect: [0,0,1,1],
		feet_x: 16,
		feet_y: 32,
		id: "invisible",
		frames: 1,
		duration: 100,
	},
	{
		image: "enemies/worm-burrowing.png",
		pad: 0,
		body_area: "all",
		accel_y: 0,
		rect: [128,32,159,63],
		feet_x: 16,
		feet_y: 32,
		id: "burrow_down",
		frames: 1,
		events: "0:rustle",
		duration: 40,
	},
	{
		image: "enemies/worm-burrowing.png",
		pad: 0,
		body_area: "all",
		accel_y: 20,
		rect: [0,32,31,63],
		feet_x: 16,
		feet_y: 32,
		id: "leap",
		frames: 4,
		duration: 5,
		attack_area: "all",
	},
],
particle_system: {
	id: "particles",
	zorder: "@include data/zorder.cfg:near_player_foreground_effects",
	type: "simple",
	spawn_rate: 0,
	time_to_live: 40,
	min_x: 18,
	max_x: 20,
	min_y: 38,
	max_y: 40,
	accel_y: 40,
	velocity_magnitude: 1000,
	velocity_magnitude_random: 500,
	velocity_rotate: 90,
	velocity_rotate_random: 180,
	animation: [
		{
			image: "enemies/worm-burrowing.png",
			id: "normal",
			duration: 60,
			rect: [0,96,15,111],
			frames: 1,
		},
		{
			image: "enemies/worm-burrowing.png",
			id: "normal",
			duration: 60,
			rect: [16,96,31,111],
			frames: 1,
		},
		{
			image: "enemies/worm-burrowing.png",
			id: "normal",
			duration: 60,
			rect: [0,112,15,127],
			frames: 1,
		},
		{
			image: "enemies/worm-burrowing.png",
			id: "normal",
			duration: 60,
			rect: [16,112,31,127],
			frames: 1,
		},
	],
},
object_type: [
	{
		id: "segment",
		prototype: ["hittable_attache"],
		properties: {
			segdist: 20,
			set_position_relative: "def(decimal rotation) -> commands [set(relative_x, cos(rotation+90) * segdist + (int <- _headward_segment.relative_x)),
												set(relative_y, sin(rotation+90) * segdist + (int <- _headward_segment.relative_y)),
												set(rotate,rotation),
												add(_oldrotate, [rotation])]",

			delayed_rotate: "decimal :: decimal(if(size(_oldrotate)>=4, _oldrotate[ size(_oldrotate)-4 ], rotate))",

			_oldrotate: { type: "[decimal]", default: [] },

			_index_in_parent: { type: "int", dynamic_initialization: true },
			_worm_head: "(obj worm_jumping <- _parent_obj)",
			_headward_segment: 	"obj worm_jumping|obj worm_jumping.segment ::
									if(seg_index = 0, _worm_head, _worm_head._segments[seg_index-1]) where seg_index = _index_in_parent",
			
			trigger_death: "execute(me, [if(me in level.active_chars, execute(me, _parent_obj.death_effects('medium'))), remove_object(me), set(me.hitpoints,0)])",

			attach: "commands :: [set(parent,_worm_head),set(zsub_order,int(_headward_segment.zsub_order) -1)]",
			detach: "commands :: [set(_oldrotate,[])]",
		},

		on_process: "[set_position_relative( (decimal <- _headward_segment.delayed_rotate))]",
		on_end_normal_anim: "animation('normal')",
		
		animation: {
			image: "enemies/worm-burrowing.png",
			pad: 0,
			body_area: "all",
			accel_y: 0,
			rect: [0,0,31,31],
			id: "normal",
			frames: 4,
			duration: 5,
		},
	}
],
}
