//A health display, in the style of hearts. One hitpoint is half a heart.
{
	id: "heart_display",
	prototype: ["hud_component"],

	hidden_in_game: true,
	zsub_order: -3,

	properties: {
		//target: { type: "custom_obj" },
		target: "custom_obj <- lp asserting lp where lp = level.local_player",
		target_hp: "int <- 
			lib.math.constrain(0, target.hitpoints, target.max_hitpoints) //always display a sane number, health can sink into the negative
			asserting target.hitpoints <= target.max_hitpoints | 'hud can not display more hitpoints (${target.hitpoints}) than max_hitpoints (${target.max_hitpoints})'
		", 
		
		heart_width: 38,
		heart_height: 38, 
		
		row_width: { type: "int", default: 5 },
		
		last_displayed_hitpoints: { type: "int", default: -1 },
		last_displayed_max_hitpoints: { type: "int", default: -1 },
		
		heart_objects_for_current_hp: "[obj heart_display.icon] :: 
			map( range(num_full),
				/*
					Draw the full hearts.
				*/
				object('heart_display.icon', {
					relative_x: d_mod(value , row_width) * heart_width, 
					relative_y: floor(value / row_width) * heart_height,
					animation: 'normal',
					parent: me,
				})
			)
			+
			map(range(num_half),
				/*
					The half-heart. Still mapped even though there's only ever 0 or 1 because it makes the code parallel to the full and empty heart cases.
				*/
				object('heart_display.icon', {
					relative_x: d_mod((num_full + value) , row_width) * heart_width, 
					relative_y: floor((num_full + value) / row_width) * heart_height,
					animation: 'half', 
					parent: me,
				})
			)
			+
			map(range(num_empty),
				/*
					The trailing set of empty heart containers.
				*/
				object('heart_display.icon', {
					relative_x: d_mod((num_full + num_half + value) , row_width) * heart_width, 
					relative_y: floor((num_full + num_half + value) / row_width) * heart_height,
					animation: 'empty', 
					parent: me,
				})
			)
		 
			where num_empty = (target.max_hitpoints - target_hp) / 2
			where num_full = target_hp / 2
			where num_half = target_hp % 2
			where d_mod = lib.math.decimal_mod,
		",
		
		_active_child_hearts: { type: "[obj heart_display.icon]", persistent: false, default: [] },
		
		update_display: "[
			set(last_displayed_hitpoints, target.hitpoints),
			set(last_displayed_max_hitpoints, target.max_hitpoints),
			map(_active_child_hearts, remove_object(value)),
			;
			set(_active_child_hearts, heart_objects_for_current_hp)
			;
			map(_active_child_hearts, add_object(value)),
			;
			if(level.player is obj frogatto_playable, level.player.instantly_hide_or_show_hud)
		]",
	},
	
	on_process: "if(last_displayed_hitpoints != target.hitpoints or last_displayed_max_hitpoints != target.max_hitpoints, 
		/*
			Only change the objects if the actual HP has changed, otherwise we'll be churning this every frame
		*/
		update_display
	)",

	on_start_level: "update_display",	
	on_create: "update_display",
	on_being_added: "update_display",
	
	on_being_removed: "[
		map(_active_child_hearts, remove_object(value)),
	]",
	
	
	object_type: [{
		id: "icon",
		prototype: ["hud_component"],
		zsub_order: -10,
		
		
		animation: [{
			"@base": true,
			no_remove_alpha_borders: true,
			image: 'gui/hud3.png', 
			frames: 1,
			duration: -1,
		},{
			id: "normal",
			rect: [33,49,49,65],
		},{
			id: "half",
			rect: [52,49,68,65],
		},{
			id: "empty",
			rect: [71,49,87,65],
		}],
	}]

}

