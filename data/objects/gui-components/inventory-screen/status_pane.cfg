{
id: "status_pane",
prototype: ["inventory_screen_pane"],

properties: {
#-------------------------- input handling --------------------------#

		handle_dispatched_input: "def(InputValue input) -> commands null",
		

#-------------------------- core behavior --------------------------#
	initialize_parts: "commands :: [
		spawn_hearts,
		spawn_heart_piece_indicator,
		spawn_coin_counter,
		spawn_death_tracker,
	]",

	spawn_hearts: "commands :: [		
		map(range(num_full), spawn('status_pane.heart_full', 
			lib.math.decimal_mod((value), row_width) * heart_width + heart_x_offset, 
			floor(value / row_width) * heart_height + heart_y_offset,
		{
			parent: me,
		})),
		map(range(num_half), spawn('status_pane.heart_half',
			lib.math.decimal_mod((num_full + value), row_width) * heart_width + heart_x_offset, 
			floor((num_full + value) / row_width) * heart_height + heart_y_offset,
		{
			parent: me,
		})),
		map(range(num_empty), spawn('status_pane.heart_empty',
			lib.math.decimal_mod((num_full + num_half + value), row_width) * heart_width + heart_x_offset, 
			floor((num_full + num_half + value) / row_width) * heart_height + heart_y_offset,
		{
			parent: me,
		}))
	]		
		asserting
			player.hitpoints <= player.max_hitpoints |  //might just want to constrain the second one, here, later?
			player.hitpoints >= 0
			
		where
			num_full = player.hitpoints/2,
			num_half = player.hitpoints%2,
			num_empty = player.max_hitpoints/2-player.hitpoints/2-player.hitpoints%2,
			row_width = 4,
			heart_width = 52,
			heart_height = 40,
			heart_x_offset = 66,
			heart_y_offset = -180 
		where
			player = level.player
		
	",

	spawn_heart_piece_indicator: "commands :: [
		spawn('status_pane.heart_pieces_indicator', -20, -164, {
			animation: desired_anim,
			parent: me
		})
			where desired_anim = switch(
											level.player.number_of_item(enum item_partial_heart_container),
											3, 'heart_pieces_three_quarters',
											2, 'heart_pieces_half',
											1, 'heart_pieces_one_quarters',
											   'heart_pieces_empty'
										)
	]",

	spawn_coin_counter: "commands :: [
		spawn('status_pane.coin_icon', -208, 204, {
			parent: me
		}),
		spawn('status_pane.coin_number_display', -144, 214, {
			parent: me,
			txt: str(level.player.coins),
		}),
		
	]",

	spawn_death_tracker: "commands :: [
		if((obj frogatto_playable <- level.player).sanitized_player_has_died_since_last_unique_checkpoint,
			[
				spawn('status_pane.skull_icon', -48, 100, {
					parent: me
				}),
				spawn('text_controller', 26, 90,{
					parent: me,
					use_absolute_screen_coordinates: true,
					zorder: lib.zorder.get('overlaid_gui_dialog_gui_element_underlay'),
					txt: me.wrapped(~You've died since the last checkpoint.  Until you reach a different one, you won't find any secrets.~, 28),
					font: 'door_label',
					align: 'left',
				}),
			],
			[
				spawn('status_pane.skull_icon_empty', -48, 100, {
					parent: me
				}),
				spawn('text_controller', 26, 90,{
					parent: me,
					use_absolute_screen_coordinates: true,
					zorder: lib.zorder.get('overlaid_gui_dialog_gui_element_underlay'),
					txt: me.wrapped(~You haven't died since the last checkpoint.  Secret places are open to you, if you can find them.~, 28),
					font: 'door_label',
					align: 'left',
				}),
			]
		)
	]"

},



animation: {
	id: "normal",
	image: 'gui/pause-menu/panel-background-status.png',
	x:0, y:0, w:276, h:264,
},



object_type: [
	{
		is_strict: true,
		"@base": true,
		use_absolute_screen_coordinates: true,
		zorder:  "@include data/zorder.cfg:overlaid_gui_dialog_gui_element_underlay",
	},

#-------------------------- individual (complete) hearts --------------------------#
	{
		id: "heart_full",
		animation: {
			id: "normal",
			image: 'gui/pause-menu/panel-status-icons.png', 
			rect: [0,64,26,87], 
		},		
	},
	{
		id: "heart_half",
		animation: {
			id: "normal",
			image: 'gui/pause-menu/panel-status-icons.png', 
			rect: [27,64,53,87], 
		},		
	},
	{
		id: "heart_empty",
		animation: {
			id: "normal",
			image: 'gui/pause-menu/panel-status-icons.png', 
			rect: [54,64,80,87], 
		},		
	},
	
	
	{
		id: "coin_icon",
		animation: {
			id: "normal",
			image: 'gui/pause-menu/panel-status-icons.png', 
			rect: [0,96,47,143], 
		},		
	},
	{
		id: "coin_number_display",
		hidden_in_game: true,
	
		properties: {
			set_text: "def(string text) -> commands [set(txt, text), fire_event(me, 'create')]",
			txt: {type: "string", default: "+"},
			size: "2",
			font: "string :: 'numbers_gold_large'",
			align: "'left'",
		},
		
		on_create: "[text(txt, font, size, align)]",
	},


	{
		id: "skull_icon",
		animation: {
			id: "normal",
			image: 'gui/pause-menu/panel-status-icons.png', 
			rect: [0,147,41,188], 
		},		
	},
	{
		id: "skull_icon_empty",
		animation: {
			id: "normal",
			image: 'gui/pause-menu/panel-status-icons.png', 
			rect: [42,147,83,188], 
		},		
	},


#-------------------------- the giant heart-piece indicator --------------------------#
	{
		id: "heart_pieces_indicator",
		animation: [{
			id: "normal",
			image: 'gui/pause-menu/panel-status-icons.png', 
			rect: [192,64,255,127], 
		},{
			id: "heart_pieces_three_quarters",
			image: 'gui/pause-menu/panel-status-icons.png', 
			rect: [64,0,127,63], 
		},{
			id: "heart_pieces_half",
			image: 'gui/pause-menu/panel-status-icons.png', 
			rect: [128,0,191,63], 
		},{
			id: "heart_pieces_one_quarters",
			image: 'gui/pause-menu/panel-status-icons.png', 
			rect: [192,0,255,63], 
		},{
			id: "heart_pieces_empty",
			image: 'gui/pause-menu/panel-status-icons.png', 
			rect: [0,0,63,63], 
		}],		
	},
	

],
}
