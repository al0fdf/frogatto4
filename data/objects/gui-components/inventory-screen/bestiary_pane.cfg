{
id: "bestiary_pane",
prototype: ["inventory_screen_pane"],

properties: {
	entry_vertical_offset: "280",

	initialize_parts: "commands :: [
		set(scroller.children, visual_entry_list),
		set(scroller.interior_dimensions.h, (entry_vertical_offset * (size(creature_list) + 1 ))/2 )
		;
		add_object(scroller),

//		debug('bp mid_x:', mid_x),
//		set(scroller.mid_x, 160),
//		set(scroller.mid_y, 85),
		;
		set(scroller.relative_x, -240),
		set(scroller.relative_y, -215),
		;
		scroller.set_scroll_offset({x:0, y:0}),
		
	]",

	scroller: { type: "obj scrollable_area", init: "object('scrollable_area',
		{
			x: 0,
			y: 0,
			z: 1000,
			viewport_width: 480,
			viewport_height: 465,
			interior_dimensions: {w: 400, h: 500},
			children: [
			],
			parent: me
		})"
	},


#-------------------------- items --------------------------#
	creature_list: "[obj hittable] ::
			filter(
				map(
					keys(frogatto.enemies_seen),
					obj hittable <- object(value)
				),
				value.is_enemy_character or value is obj throwable_projectile
			)",

	visual_entry_list: "map(creature_list,
							{
								rel_pos: {x: 45, y: 50 + index * entry_vertical_offset },
								obj: object('bestiary_pane.bestiary_item', x, y, {displayed_obj: value})
							}
						) + map(creature_list,
							{
								rel_pos: {x: 126, y: 70 + index * entry_vertical_offset },
								obj: object('bestiary_pane.item_frame', x, y, 1)
							}
						) + map(creature_list,
							{
								rel_pos: {x: 120, y: 50 + index * entry_vertical_offset },
								obj: text_controller_for_creature(value)
							}
						)",
						
								
	text_controller_for_creature: "def(obj hittable displayed_obj) -> obj text_controller
						object('text_controller', 0,0, {
							relative_x: 100,
							relative_y: 0,
							use_absolute_screen_coordinates: true,
							zorder: int<-lib.json.get_document_map('data/zorder.cfg').overlaid_gui_dialog_gui_element,
							font: 'door_label_dark',
							txt: 
									 displayed_obj.title+'   ðŸ§¬: '+displayed_obj.my_taxonomy_as_string+'\n \n'
									+ wrapped(displayed_obj.description, 40)+'\n \n'
									+ if(frogatto.enemies_tasted[displayed_obj.frogourmet_tag] and displayed_obj.taste, wrapped(~ðŸ‘…: ~+displayed_obj.taste, 41) + '\n', 'ðŸ‘…: unknown') +
									'\n \n' +
									'Weak versus:  ' + format_resistance_string(displayed_obj, def(res) res > 1.0) +
									'\n\n\n\n\n' +
									'Strong versus: ' + format_resistance_string(displayed_obj, def(res) res < 1.0)
									,
						})",
	
	format_resistance_string: "def(obj hittable displayed_obj, function(decimal)->bool test) -> string
										if( size(unusual_resistances) > 0,
											fold(
												map(
													keys(unusual_resistances),
													emoji_for_damage_type(value)
												),
												a + b
											),
											'Nothing.'
										)
											where unusual_resistances =
													filter(
														displayed_obj.damage_tables[displayed_obj.my_taxonomy],
														test(value)
													)
										",

	emoji_for_damage_type: "def(DamageType damage_type) -> string
								switch(damage_type,
									enum neutral,		'',
									enum fire,			'ðŸ”¥',
//									enum ice,			'ðŸ”¥',
									enum arcane,		'ðŸ”®',
									enum energy,		'âš¡',
									enum acid,			'ðŸ’§',
									enum impact,		'ðŸ”¨',
									enum impale,		'ðŸ”±',
									enum lacerate,		'ðŸ—¡',
														''
								)",																
										


#-------------------------- input handling --------------------------#

		handle_dispatched_input: "def(InputValue input) -> commands [
			switch(input,
				enum arrow_left,	null,
				enum arrow_right,	null,
				enum arrow_up,		null,
				enum arrow_down,	null,
		
				enum trigger_1, 	null
		)]",

},

//Make it so that the bestiary scrolls when you're holding up or down.
//TODO: Read these controls from user configuration.
on_process: "scroller.add_scroll_offset(sum(
	[{
		Down:     {x:0, y: 10 }, //arrow keys
		s:        {x:0, y: 10 }, //qwerty, wasd cluster
		o:        {x:0, y: 10 }, //dvorak, ,aoe cluster
		Up:       {x:0, y:-10 }, //arrow keys
		w:        {x:0, y:-10 }, //qwerty, wasd cluster
		',':      {x:0, y:-10 }, //dvorak, ,aoe cluster
		PageUp:   {x:0, y:-100},
		PageDown: {x:0, y: 100},
	}[k] | k <- level.player.ctrl_keys],
	{x:0, y: 0}
))",


animation: {
	id: "normal",
	image: 'gui/pause-menu/panel-background-notepad.png',
	x:0, y:0, w:276, h:276,
},



object_type: [
	{
		always_active: true,
		use_absolute_screen_coordinates: true,
		zorder: 4999,
		id: "item_frame",
		animation: {
			id: "normal",
			image: 'gui/pause-menu/bestiary-item-boxing.png', 
			rect: [0,0,127,63], 
		},
		
		//on_process: "debug(x,y)",		
	},
	{
		always_active: true,
		use_absolute_screen_coordinates: true,
		zorder: 5000,
		id: "bestiary_item",
		properties: {
			displayed_obj: { type: "obj hittable", dynamic_initialization: true },
			displayed_obj_animation: "{
								id: string,
								image: string,
								duration: int,
								frames: int,
								frames_per_row: int,
								pad: int,
								reverse: bool,
								play_backwards: bool,
								x: int,
								y: int,
								w: int,
								h: int,
							} :: {
								id: doa.id,
								image: doa.image,
								duration: doa.duration,
								frames: doa.frames,
								frames_per_row: if(doa.frames_per_row = -1, doa.frames, doa.frames_per_row),
								pad: doa.pad,
								reverse: doa.reverse,
								play_backwards: doa.play_backwards,
								x: doa.x,
								y: doa.y,
								w: doa.x2 - doa.x,
								h: doa.y2 - doa.y
							}
								where doa = get_object_type_animation(displayed_obj.type, desired_anim)
								where desired_anim =	switch(true,
															'walk' in displayed_obj.available_animations, 'walk',
															'fly' in displayed_obj.available_animations, 'fly',
														displayed_obj.animation)
						",
			
			},
		on_create: "[
						//debug(displayed_obj_animation),
						set(me.animation, displayed_obj_animation),
						//debug(displayed_obj_animation);
						//debug(me.animation_obj)
					]",
		on_end_anim: "set(animation, displayed_obj_animation)",
	}
],
}
