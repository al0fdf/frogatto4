{
id: "inventory_screen_controller_2",
ignore_collide: true,
zorder: "@include data/zorder.cfg:overlaid_gui_dialog_underlay",
use_absolute_screen_coordinates: true,
blend_mode_source: "zero",
blend_mode_dest: "dst_color",
is_strict: true,

types: {
	Vector: "Point",
	InputValue: "enum {
						close,
						pane_left, pane_right,
						arrow_left, arrow_right, arrow_up, arrow_down,
						trigger_1
					}",
	
},

properties: {
#-------------------------- cosmetic/etc settings --------------------------#
	pause_level: true,
	panel_separation: 630,

	panel_dimensions: [256, 256],



#-------------------------- aliases --------------------------#
	frogatto: "obj frogatto_playable <- level.player",


#-------------------------- storage --------------------------#
	live_panels: { type: "[obj inventory_screen_pane]", default: [] }, //currently this is handled by the map(spawned_children, [remove_object(value)]) call
	focused_panel: "obj inventory_screen_pane :: live_panels[focused_panel_index]",
	focused_panel_index: {type: "int", default: 0},
	
	panel_offset: {
		type: "Vector",
		init: "[0,0]",
	},

	mouse_down_xy: {
		type: "{int -> null|Point}",
		default: {},
	},

	num_panels: {type: "int", dynamic_initialization: true},




#-------------------------- panel setup --------------------------#
	add_all_panels: "commands ::
		[
			map(panes_to_add, ({test: any, add: function(int) -> commands} <- value).add(index)),
			set(num_panels, size(panes_to_add)),
		] 
	",
	
	panes_to_add: "[{test: any, add: function(int) -> commands}] ::
		filter([
			{	
				test: true,
				add: add_individual_panel('bestiary_pane')
			},
			{	
				test: true,
				add: add_individual_panel('status_pane')
			},
			{
				test: true,
				add: add_inventory_panel([enum passive, enum secondary_item])
			},
			{	
				test: true,
				add: add_inventory_panel([enum primary_ability, enum super_ability])
			},
			{	
				test: level.player.has_item(enum item_magic_map),
				add: add_individual_panel('map_pane')
			},
		], ({test: any, add: function(int) -> commands} <- value).test)
	",
	
	add_inventory_panel:	"def([ItemCategory] item_categories ) -> function(int) -> commands
		def(int index) -> commands [
			add_object(pane),
			add(live_panels, [obj inventory_screen_pane <- pane]),
		] where pane = object(
			'inventory_pane', 0,0,1, {
				relative_x: level.camera_position[2]/2 + index*panel_separation,
				relative_y: level.camera_position[3]/2,
				use_absolute_screen_coordinates: true,
				zorder: int<-lib.json.get_document_map('data/zorder.cfg').overlaid_gui_dialog_back_panel,
				parent: me,
				allowed_item_categories: item_categories,
			}
		)
	",

	add_individual_panel:	"def(string type_name) -> function(int) -> commands
		def(int index) -> commands [
			add_object(pane),
			add(live_panels, [obj inventory_screen_pane <- pane]),
		] where pane = object(
			type_name, 0,0,1, {
				relative_x: level.camera_position[2]/2 + index*panel_separation,
				relative_y: level.camera_position[3]/2,
				use_absolute_screen_coordinates: true,
				zorder: int<-lib.json.get_document_map('data/zorder.cfg').overlaid_gui_dialog_back_panel,
				parent: me,
			}
		)
	",




	
	add_scroll_arrows: "def() -> commands [
		add_object(object(
			'${me.type}.pan_arrows', 
			60, level.camera_position[3]/2, 1, 
			{animation: 'left_up', inventory_screen_controller: me} )),
		add_object(object(
			'${me.type}.pan_arrows', 
			level.camera_position[2]-60, level.camera_position[3]/2, 1, 
			{animation: 'right_up', inventory_screen_controller: me} )),
	]",

#-------------------------- keyboard input --------------------------#
	key_codes: "[string] :: [ 
		'i',
		',',
		'.',
		'w',
		'e',
		'Right',
		'Left',
		'Up',
		'Down',
		' ',
		';',
		'q',
		'a',
		's'
	]",

	active_inputs: "[InputValue] :: map(filter(key_codes, frogatto.ctrl_keyboard(value) = 1), {
		'i'			: enum close,
		','			: enum pane_left,
		'.'			: enum pane_right,
		'w'			: enum pane_left,
		'e' 		: enum pane_right,
		'Right'		: enum arrow_right,
		'Left'		: enum arrow_left,
		'Up'		: enum arrow_up,
		'Down'		: enum arrow_down,
		

			//really, here, we're going through all possible input buttons, whether they're jump/attack/whatever, as well as some common 'confirm' triggers like space.  All of these will basically do the same thing.
		' '			: enum trigger_1,
		';'			: enum trigger_1, //DDR's keyboard setting for 'jump'. Ideally, this'd be a query.
		'q'			: enum trigger_1,
		'a'			: enum trigger_1, //Default keyboard setting for 'jump'.
		's'			: enum trigger_1,		
	}[value])",
	
	
	process_inputs: "commands :: [
		process_individual_keypresses,
		frogatto._track_keys(),

		if(pause_level, add(frogatto.cycle, 1)), //pump cycle to get keyboard inputs
		if(cycle > 1 and frogatto.ctrl_keyboard('i') = 1, die()), //>1: Prevent open then close.
	]",	
	
	process_individual_keypresses: "commands :: map(active_inputs, switch(value,
		enum close,				if(cycle > 1,
                                [
									set(frogatto.last_focused_panel_index, focused_panel_index),
                                    die(),
                                ]),
		enum pane_left,			slide_to_relative_panel(-1),
		enum pane_right,		slide_to_relative_panel(1),
		enum pane_left,			slide_to_relative_panel(-1),
		enum pane_right,		slide_to_relative_panel(1),
								dispatch_input(value)
	))",

	dispatch_input: "def(InputValue input) -> commands
		focused_panel.handle_dispatched_input(input)
	",

#-------------------------- utility functions --------------------------#

	reposition_ui: "def() -> commands
		set(me.mid_xy, lib.standardize.to_int_point(panel_offset))",


	slide_start_cycle: {default: 1},
	slide: "def() -> decimal lib.math.constrain(0, (cycle-slide_start_cycle)/1.0/max_slide_duration, 1)",


	/*
		Slide the panels around on screen by setting a function that gives their location.
		Note: "from" should always be panel_offset(). If we directly reference panel_offset in the property, when we set panel_offset to the new offset-finding function, the function will happily recurse to death because it's now calling itself. To prevent this from happening, we need to be calling the /old/ function for the panel offset, which is captured when it's passed in as a parameter.
	*/

	max_slide_duration: 35, //tween duration between the inventory and map panels

	slide_from_to: "def(Point from, Point to) -> commands [
		animate(me, {
			panel_offset: to
		},{
			duration: max_slide_duration,
			easing: lib.math.ease_out_circ
		})
	]",

	panel_index_by_type: "def(string panel_type) -> int|null 
		index(live_panels, find(live_panels, value.type = panel_type))
	",

	//1 to slide left, -1 to slide right.
	slide_to_relative_panel: "def(int direction) -> commands [
		lib.sound.play_sound(me, 'inventory-page-turn.wav'),
		set(focused_panel_index, int(new_panel_num)),
		slide_from_to(panel_offset, [-panel_separation*new_panel_num,0])
	] where new_panel_num = lib.math.constrain(0, focused_panel_index+direction, num_panels-1)",

	snap_to_panel: "def(int panel_num) -> commands [
		set(mid_x, -panel_separation*panel_num) ;
		set(focused_panel_index, panel_num),
		set(panel_offset, [-panel_separation*panel_num,0]),
	]",
},










on_create: "[ //TODO: restore Frogatto's cycle to what it was before the menu
	//Pause
	if(pause_level, set(level.paused, true)),
	if(pause_level, set(me.paused, false)),

	//Fade black backdrop in.
	null or set(draw_area, if(pause_level,
		[0, 0, level.camera_position[2]/2 + panel_separation * size(panes_to_add) + img_w, level.camera_position[3]/2 + img_h], //+img_w/h: draw_area seems to floor to a a multiple of base width/height here
		[0, 0, 0, 0]
	)),
	
	//Alpha doesn't work with blend_modes set.
	//map(range(steps), schedule(value, set(alpha, int(lib.math.ease_out_sine(value/1.0/steps)*128)))) where steps = 10,
	
	
	//Add gui.
	reposition_ui(), //set menu to starting position

	//Keep the input that opened the inventory screen from closing the inventory screen.
	if(not pause_level, add(frogatto.cycle, 1)),
	if(not pause_level, set(frogatto.control_lock, [])),

	add_all_panels,
	
    set(focused_panel_index, frogatto.last_focused_panel_index), //restore currently open panel index in the player    
    
	add_scroll_arrows(),
	
	;snap_to_panel(focused_panel_index),
]",

//To auto-reload this, add spawn('inventory_screen_controller_2', 0,0,1), to frogatto's on_process. (I can't figure out how to re-spawn the object from this event.) Use only if pause_level is set to true!
on_type_updated: "[
	//debug('Killed inventory screen on reload. (c${level.cycle})'),
	die(),
]",

on_die: "[
	/* Doesn't work with blend_modes set.
	//Fade black backdrop out.
	map(range(steps), schedule(value, set(alpha, int(lib.math.ease_out_sine((steps-value)/1.0/steps)*128)))) where steps = 10,
	*/

	//Despawn
	map(spawned_children, [
		remove_object(value),
		fire_event(value, 'die'),
	]),

	//Unpause
	if(pause_level, set(level.paused, false)),
	if(not pause_level, set(frogatto.control_lock, null)),
]",

on_process: "[
	reposition_ui(),
	process_inputs
]",

"on_mouse_down*": "if(not arg.handled, //Set by pan arrows.
	set(mouse_down_xy, {(arg.mouse_button):[arg.mouse_x, arg.mouse_y]}) )", //Should reference mouse_index, which doesn't seem to exist. Oh well.
"on_mouse_up*": "set(mouse_down_xy, {})",
"on_mouse_move*": "if(mouse_button_down and abs(mouse_button_down[0] - arg.mouse_x) > 50, [
	slide_to_relative_panel(sign(mouse_button_down[0] - arg.mouse_x)),
	set(mouse_down_xy, {}),
]) where mouse_button_down = mouse_down_xy[arg.mouse_button]",

animation: {
	id: "normal",
	image: "tiles/black_tile_overlay.png",
	x:0, y:0, w:16, h:16,
	frames: 1,
	duration: -1,
},

object_type: [
	{
		"@base": true,
		use_absolute_screen_coordinates: true,
	},
	
	{
		id: "pan_arrows", //like, the action, not the god
		zorder: "@include data/zorder.cfg:overlaid_gui_dialog_overlay",
		
		properties: {
			inventory_screen_controller: {type: "obj inventory_screen_controller_2"},
		
			hit: "def(int mouse_x) -> bool bool( //Passing in arg object is officially recommended against!
				    mouse_x-level.camera_position[0]+margin >= x 
				and mouse_x-level.camera_position[0]-margin <= x+img_w
			) where margin = 12",
			
			facing_name: "if(strstr(animation, 'left'), 'left', 'right')",
			depressed: "bool(strstr(animation, 'down'))",
		},		
		
		"on_mouse_move*": "set(brightness, if(hit(arg.mouse_x), 300, 255))",
		"on_mouse_down*": "if((not arg.handled) and hit(arg.mouse_x), [
			set(animation, '${facing_name}_down'),
			set(arg.handled, true), //swallow_mouse_event() has no effect
		])",
		"on_mouse_up*": "[
			set(animation, '${facing_name}_up'),
			if(depressed and hit(arg.mouse_x), 
				inventory_screen_controller.slide_to_relative_panel(
					if(facing_name = 'left', -1, 1) ) ),
		]",
		
		
		animation: [{
			"@base": true,
			image: "gui/pause-menu/carousel-scroll-button.png",
			frames: 1,
		},{
			id: "left_up",
			rect: [0,0,31,79],
		},{
			id: "right_up",
			rect: [64,0,95,79],
		},{
			id: "left_down",
			rect: [32,0,63,79],
		},{
			id: "right_down",
			rect: [96,0,127,79],
		},],
	},
],
}
