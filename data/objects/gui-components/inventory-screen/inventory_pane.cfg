{
id: "inventory_pane",
prototype: ["inventory_screen_pane"],

properties: {
#-------------------------- input handling --------------------------#

		handle_dispatched_input: "def(InputValue input) -> commands [
			switch(input,
				enum arrow_left,	selector_cursor.select(selector_cursor.next_item(4)),
				enum arrow_right,	selector_cursor.select(selector_cursor.next_item(6)),
				enum arrow_up,		selector_cursor.select(selector_cursor.next_item(8)),
				enum arrow_down,	selector_cursor.select(selector_cursor.next_item(2)),
		
				enum trigger_1, 	selector_cursor.activate()
		)]",
		

#-------------------------- core behavior --------------------------#
	allowed_item_categories: { type: "[ItemCategory]", default: [] },
	
	item_anchors: { type: "[obj inventory_pane.item_anchor]", default: [] },

	initialize_parts: "commands :: [
		map(
			map(
				filter(frogatto.items_carried, value.item_category in allowed_item_categories)
				, value.id
			), 'item_id', 
			[
				add(item_anchors, [item_obj]),
				add_object(item_obj),
			]	
				where item_obj = object('inventory_pane.item_anchor', 0, 0, 1, {
					item_id: item_id,
					count: frogatto.number_of_item(item_id),
					parent: me,
					relative_x: -182+74*positions[index][0],
					relative_y: -155+72*positions[index][1],
				})
			
		) where positions = [[item_x,item_y] | item_x <- range(6), item_y <- range(4)],
		
		[
			add_object(text_name_display),
			set(text_name_display.relative_x, -0),
			set(text_name_display.relative_y, 135),
		],

		[
			add_object(text_description_display),
			set(text_description_display.relative_x, -220),
			set(text_description_display.relative_y, 195),
		],

		[
			add_object(selector_cursor),
			set(selector_cursor.relative_x, -80),
			set(selector_cursor.relative_y, 135),
		],
	]",



	text_name_display: {
		type: "obj text_controller",
		init: "object('text_controller', 0,0,1, {
			parent: me,
			use_absolute_screen_coordinates: true,
			zorder: lib.zorder.get('overlaid_gui_dialog_gui_element'),
			txt: ~inventory~,
			align: 'center',
		})",
	},

	text_description_display: {
		type: "obj text_controller",
		init: "object('text_controller', 0,0,1, {
			parent: me,
			use_absolute_screen_coordinates: true,
			zorder: lib.zorder.get('overlaid_gui_dialog_gui_element'),
			txt: ~description~,
			font: 'door_label',
			align: 'left',
		})",
	},

	
	selector_cursor: {
		type: "obj inventory_pane.selector_cursor",
		init: "object('inventory_pane.selector_cursor', 0,0,1, {
			parent: me,
			use_absolute_screen_coordinates: true,
		})",
	},
	
	


},



animation: {
	id: "normal",
	image: 'gui/pause-menu/panel-inventory-screen.png',
	x:0, y:0, w:276, h:264,
},



object_type: [
	{
		"@base": true,
		use_absolute_screen_coordinates: true,
	},


	{
		id: "selector_cursor",
		zorder: "@include data/zorder.cfg:overlaid_gui_dialog_gui_element",
		
		properties: {
			cursor_offset: "[0,0]",
			selected_object: {type: "obj inventory_pane.item_anchor|null", default: null},
			
			
			fake_mouse_event_args: { // Needed, can't fire event without it.
				type: "{mouse_button: int, mouse_x: int, mouse_y: int, world_point: [decimal,decimal,decimal,]}",
				default: {mouse_button: -1, mouse_x: 0, mouse_y: 0, world_point: [0,0,0]},
			},
			
			
			item_chars: "[obj inventory_pane.item_anchor] <- 
				parent.item_anchors asserting parent is obj inventory_pane asserting parent",
			
			next_item: "def(int direction) -> obj inventory_pane.item_anchor|null //as on a number pad
				choose(
					filter(item_chars,
						switch(direction,
							2, value.y > y2 and abs(decimal(x2-value.x)/decimal(y2-value.y)) <= 2.0, //2.0 and 0.5 are the slope values for which the objects we want will be above/below. The slope conceptually starts at the object we're looking at, and is a V shape because of abs(). Originally, with slope values of 1, we would only consider objects that were in a 45Â° cone in the direction we wanted to move the cursor. However, that turned out to be a bit janky-feeling when we moved from one arm of an L-shape to another, so we widened the search angle and then distorted the coordinates of the closeness function to match.
							4, value.x < x2 and abs(decimal(x2-value.x)/decimal(y2-value.y)) >= 0.5, //The initial </> comparison is a workaround a infinite math. the abs() is returning the absolute of -inf8, which is one more than inf7, so it wraps back around to -inf8. However, -1/0 is inverting inf7, coming out with -inf7, which is one more than -inf8 afaict.
							6, value.x > x2 and abs(decimal(x2-value.x)/decimal(y2-value.y)) >= 0.5,
							8, value.y < y2 and abs(decimal(x2-value.x)/decimal(y2-value.y)) <= 2.0,
						) and if(selected_object, value.item_id != selected_object.item_id, true)),
					-lib.math.length(
						zip(scale, value.mid_xy, a*b), 
						[(midpoint_x - cursor_offset[0]) * scale[0], (midpoint_y - cursor_offset[1]) * scale[1]]
					) 
				) where x2 = x - self.cursor_offset[0],
				        y2 = y - self.cursor_offset[1],
				        scale = [if(direction in [2,8], 1, 2), //Weight search to favour items closer in the direction we want. The green is the scaling after the *2 we apply here (refer to the external image: status_pane_comment.png
				                 if(direction in [4,6], 1, 2)]",
					
			select: "def(obj inventory_pane.item_anchor|null target) -> commands if(target, [
				set(selected_object, target),
				animate(me, {
					relative_x: target.relative_x,
					relative_y: target.relative_y
				},{
					duration: 20,
					easing: lib.math.ease_out_circ
				}),
				fire_event(target, 'mouse_move', fake_mouse_event_args),
				update_selected_item_text(target),
			])",
			
			change_animation: "def( ItemCategory item_category) -> commands
				set(animation,
					switch(item_category,
						enum passive,			'passive_item',
						enum primary_ability,	'active_ability',
						enum super_ability,		'super_ability',
						enum secondary_item,	'normal',
												'normal'
					)
				)",
			
			update_selected_item_text: "def(obj inventory_pane.item_anchor selected_obj) -> commands
				[	lib.sound.play_sound(me, 'inventory-select'),
					parent.text_name_display.set_text(item_name),
					parent.text_description_display.set_text(parent.wrapped(item_desc, 52)),
					change_animation(item_info.item_category),
				]
				asserting parent is obj inventory_pane asserting parent
				where item_name = item_info.name
				where item_desc = item_info.description

				where item_info = level.player.item_info(selected_obj.item_id)
			",
			
			activate: "def() -> commands if(selected_object,
				[selected_object.activate, lib.sound.play_sound(me, 'inventory-activate')]
			)",
			
			/*
			activate: "def() -> commands if(selected_object, [
				fire_event(selected_object, 'mouse_down', fake_mouse_event_args),
				fire_event(selected_object, 'mouse_up', fake_mouse_event_args),
				fire_event(selected_object, 'click', fake_mouse_event_args),
			])",
			*/
		},
		
		on_create: "if(first_target, 
			select(first_target), 
			schedule(1, fire_event('create'))
		) where first_target = find(item_chars, 
			value is obj inventory_pane.item_anchor)",
		
		animation: [{
			"@base": true,
			image: "gui/pause-menu/cursor.png",
			frames: 1,
			no_remove_alpha_borders: true,
		},{
			id: "normal",
			rect: [63,0,125,62],
		},{
			id: "passive_item",
			rect: [126,0,188,62],
		},{
			id: "active_ability",
			rect: [126,63,188,125],
		},{
			id: "super_ability",
			rect: [189,0,251,62],
		},],
	},

	
	{
		id: "item_anchor",
		zorder: "@include data/zorder.cfg:overlaid_gui_dialog_gui_element_underlay",
		properties: {
			frogatto: "obj frogatto_playable <- level.player",

			count: { type: "int" },
			item_id: { type: "InventoryItemType", dynamic_initialization: true },
			icon: { type: "obj inventory_pane.item_icon", dynamic_initialization: true },
			
			is_active_secondary_item: "bool :: frogatto.current_secondary_item = item_id",

			is_active_primary_ability: "bool :: frogatto.current_ability = item_id",


			is_selected: "bool :: parent.selector_cursor.selected_object = me
								asserting parent is obj inventory_pane asserting parent",

			active_secondary_item_outline: { type: "obj inventory_pane.active_secondary_item_outline", init: "object('inventory_pane.active_secondary_item_outline',mid_x,mid_y, {alpha: 0, parent: me, relative_y: -1})" },

			active_primary_ability_outline: { type: "obj inventory_pane.active_secondary_item_outline", init: "object('inventory_pane.active_secondary_item_outline',mid_x,mid_y, {alpha: 0, parent: me, relative_y: -1, animation: 'ability'})" },


			item_info: "class inventory_item :: frogatto.item_info(item_id)",

				//TODO:  make this safe wrt complaining if the item is an invalid type.
			activate: "commands :: [
				switch(item_info.item_category,
					enum primary_ability, set(frogatto.current_ability, item_id),
					enum secondary_item, set(frogatto.current_secondary_item, item_id)
				)
			]",
			

			icon_animation: "def(bool active) -> map
				{
					id: 'normal' + if(active, '_active', ''), 
					image: item_info.anim_image,
					frames: if(active, item_info.anim_frame_count, 1),
					duration: 6,
					pad: 3,
					scale: 3,
					rect: item_info.anim_rect,
					no_remove_alpha_borders: true,
				}
			",


			text_quantity_display: {
				type: "obj text_controller",
				init: "object('text_controller', mid_x,mid_y,1, {
					parent: me,
					use_absolute_screen_coordinates: true,
					zorder: lib.zorder.get('overlaid_gui_dialog_gui_element'),
					txt: '',
					align: 'center',
					relative_x: 28,
					relative_y: 32
				})",
			},

		},
		
		on_create: "[
			add_object(text_quantity_display),
			add_object(active_secondary_item_outline),
			add_object(active_primary_ability_outline),
			if(count > 1, 
				set(text_quantity_display.txt, 'x${count}')
			),
			add_object(new_icon),
			set(icon, new_icon),
		] where new_icon = object('inventory_pane.item_icon', 0, 0, 1, {
			animation: icon_animation(false),
			parent: me,
			relative_x: 0,
			relative_y: -1,
		})",

		
		on_process: "[
				if( is_active_secondary_item,
					set(active_secondary_item_outline.alpha, 255),
					set(active_secondary_item_outline.alpha, 0)
				),
				if( is_active_primary_ability,
					set(active_primary_ability_outline.alpha, 255),
					set(active_primary_ability_outline.alpha, 0)
				),
				if(	is_selected,
					[
						set(icon.relative_y, 7*sin(cycle*4) - 10),
						if(icon.animation != 'normal_active',
							set(icon.animation, icon_animation(true)),
						)
					],
					[
						set(icon.relative_y, -1),
						set(icon.animation, icon_animation(false)),
					]
				),
			]",

		on_die: "[
			map(spawned_children, [
				remove_object(value),
				fire_event(value, 'die'),
			]),
		]",

		
		animation: [{
			"@base": true,
			image: "gui/pause-menu/cursor.png",
			frames: 1,
			no_remove_alpha_borders: true,
		},{
			id: "normal",
			rect: [0,64,62,125],
		},],
	
	},
	{
		id: "active_secondary_item_outline",
		zorder: "@include data/zorder.cfg:overlaid_gui_dialog_gui_element_underlay",

		animation: [{
			"@base": true,
			image: "gui/pause-menu/cursor.png",
			frames: 1,
			no_remove_alpha_borders: true,
		},{
			id: "normal",
			rect: [0,0,62,62],
		},{
			id: "ability",
			rect: [63,63,125,125],
		},],
	
	},
	{
		id: "item_icon",
		zorder: "@include data/zorder.cfg:overlaid_gui_dialog_items",
		
		on_end_anim: "set(animation_obj, animation_obj)",	
		
		
		animation: [{
			"@base": true,
			image: "props/store-items.png",
			frames: 1,
			duration: 6,
			pad: 3,
			scale: 3,
			no_remove_alpha_borders: true,
		}],
	},


],
}
