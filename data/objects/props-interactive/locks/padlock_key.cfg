{
id: "padlock_key",
prototype: ["throwable"],
zorder: "@include data/zorder.cfg:player",
solid_dimensions: ["thrown"],
collide_dimensions: ["key"],
no_compile_image: "props/keys.png",
friction: 1000,

editor_info: {
	category: "keys & triggers",
},


properties: {
#-------------------------- constructor/destructor logic --------------------------#
	throwable_object_contructor: "commands :: [
 		if(level.player.get_stored_event(event_name) = 1, remove_object(me)),
 
 		//if(original_label = null, set(original_label, label)),
		if(color = null, set(color, attributes['color'])),
		if(attributes['color'] = null, set(attributes['color'], color)),					
	]",



#-------------------------- hittable metadata --------------------------#
	swallowable: "bool :: true",
	material_sound: "enum small_metal",
	taxonomy: "TaxonomyType :: enum neutral",
	team: "'neutral'", //<- will collide with stuff on other teams, shouldn't do damage.  Can currently kill opponents if they're thrown into it.
	
		
	set_to_animation: "def(string name) -> commands set(animation, {
		image: 'props/keys.png',
		accel_y: 80,
		body_area: 'all',
		duration: -1,
		id: name,
		rect: image_rect_for_color[color]
	})",
		
	image_rect_for_color: "{string->[int,int,int,int]} :: {
								'gold':			[0,0,15,15],
								'silver':		[16,0,31,15],
								'green':		[32,0,47,15],
								'red':			[48,0,63,15],
								'purple':		[64,0,79,15],
								'blue':			[80,0,95,15],
								'cyan':			[96,0,111,15]
							}",
#--------------------------  core behavior handlers --------------------------#	
		/*
			Basically we want to null out the core hittable behavior paths that lead to taking damage.  Keys (for the time being) are completely and utterly indestructible.  Do note that we actually don't deal with key-unlocking through the hittable/body collisions at all - we actually do it in an "on_collide_object" event in the target objects, and we do all the filtering (to limit it to just keys) with collide_dimensions, which not only greatly simplifies it, but is also very performant.
		*/
	handle_body_collision: "def(custom_obj _collide_with, string collide_with_area, [builtin user_collision_callable]|null all_collisions=null, int|null collision_index=null) -> commands null",
	
	get_hit_by: "def(obj hittable collide_with) -> commands null",

	get_hit_sourceless: "def(DamageType damage_type, int damage_amount) -> commands null",

	//handle_collision_with_hittable: "def(obj hittable collide_with, string collide_with_area) -> commands null",
	
	
#-------------------------- copy constructor --------------------------#
	unique_attribute_extractor: "def(obj hittable source_object) -> map
		{
			original_level: 	source_object.original_level,
			original_position:	source_object.original_position,
			original_label:		source_object.original_label,
			color:				source_object.color,
			event_name:			source_object.event_name,
			valid_levels:		source_object.valid_levels,
		} asserting source_object is obj padlock_key	
	",
	

#-------------------------- state values --------------------------#
	color: { type: "string", dynamic_initialization: true, editor_info: { type: "enum", value:"'gold'", enum_values: ["gold", "silver", "green", "red", "purple", "blue", "cyan"] } },
	event_name: { type: "string", default: "", editor_info: { type: "text" } },
	
	valid_levels: { type: "[string]", default: [] },


		#--- for respawn tracking ---#
	original_position: { type: "{ x: int, y: int }", init: "{ x: me.x, y: me.y }" },
	original_level: { type: "string", init: "level.id" },
	original_label: { type: "string", init: "label" },
	number_of_cycles_we_have_been_underwater: { type: "int", init: "0" },
	observer: { type: "obj invisible_observer|null", default: null },

	
#-------------------------- respawn tracking --------------------------#
	
	on_original_level: "bool :: level.id = original_level",

	/*
		This is an odd one, because we can't pure-functionally query it; once we teleport back to the original level, the `on_original_level` expression will start resolving to true (since of course we always teleport back to the original level the key was from).  So we set a temporary variable.
	*/
	came_from_another_level_for_cutscene: { type: "bool", default: false },
		
	restore_to_original_position: "commands :: [
					impact_cloud_silent(mid_x, mid_y, 'large'),
					set(number_of_cycles_we_have_been_underwater, 0),

					if(not on_original_level,
						restore_within_other_level,	//do the crazy bullshit to cross-level cutscene this
						restore_within_current_level
					)
				]",
	
	
	restore_within_other_level: "commands :: 
						schedule(20,[
							spawn_player('invisible_observer', level.player.mid_x, level.player.mid_y, 1, 
								[
									set(child._player, level.player),
									set(child._post_cutscene_object, me.original_label),
									set(child._post_cutscene_level, level.id),
									set(child._cutscene_trigger_label, me.original_label),
								]
							),
							teleport(original_level,'','instant'),
							screen_flash([0,0,0,255], [0,0,0,-5], 50)
						])",

	restore_within_current_level: "commands :: [
									set(alpha, 0),
									set(me.mid_xy, [original_position.x, original_position.y]),
									level.player.observe_and_trigger_points_of_interest([me], true, if(came_from_another_level_for_cutscene, false, true), fire_event(me, 'finish_cutscene'))
								]",

	visually_reappear: "commands :: [
							set(me.alpha, 255),
							impact_cloud_silent(mid_x, mid_y, 'large'),
							schedule(20, bind_command( def() spawn('metal_specular_sparkle_2', mid_x, y+2, 1) ))
						]",

	time_before_respawning_underwater: "250",
},

#-------------------------- handle key expiration and respawning --------------------------#
	/*
		Normally, we just use a regular activation area to save time, but once we've been interacted with, we should start tracking our physics regardless - we want to make sure we don't pause and fail to 'die' if we fall into a bottomless pit.
	*/
on_been_grabbed: "set(always_active, true)",

on_outside_level: "restore_to_original_position",

on_do_cutscene: "[
					set(came_from_another_level_for_cutscene, true)
					; restore_within_current_level
				]",


on_finish_cutscene: "if(observer != null, observer.cutscene_finished )",

on_process: "if(not underwater, 
				set(number_of_cycles_we_have_been_underwater, 0),
				[if(number_of_cycles_we_have_been_underwater > time_before_respawning_underwater,
					restore_to_original_position,
					add(number_of_cycles_we_have_been_underwater, 1)
				),
				if(timer_value % (time_before_respawning_underwater/5) = 0,
					[
						spawn('text_flash',midpoint_x,midpoint_y-20,{ txt: '' + ceil(timer_value/divisor), font: 'white_outline' }),
						flash_very_bright,
						schedule(1, flash_off)
					]
				)
				]	where timer_value = time_before_respawning_underwater - number_of_cycles_we_have_been_underwater
					where divisor = (time_before_respawning_underwater/5.0)
			)",
#-------------------------- setup --------------------------#
//on_create: "[
//				//if(original_label = null, set(original_label, label)),
//				if(color = null, set(color, attributes['color'])),
//				if(attributes['color'] = null, set(attributes['color'], color)),					
//			]",
//on_load: "fire_event('create')",

//on_start_level: "[ if(level.player.get_stored_event(event_name) = 1, remove_object(me)) ]",
solid_area: [0,0,15,15],


#-------------------------- animation --------------------------#
on_end_anim: "set_to_animation('thrown')",


}
