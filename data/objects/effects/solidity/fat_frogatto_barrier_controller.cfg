{
id: "fat_frogatto_barrier_controller",
ignore_collide: true,
hidden_in_game: true,
is_strict: true,
zorder: "@include data/zorder.cfg:in_front_of_everything",
editor_info: {
    category: "controllers",
},

properties: {
    set_actA: "commands ::
                    set(activation_area, [
                        min(_x_bound,_x2_bound) -200,
                        min(_y_bound,_y2_bound) -200,
                        abs(_x_bound-_x2_bound) +200,
                        abs(_y_bound-_y2_bound) +200
                    ])",


#-------------------------- editor settings --------------------------#
    _x_bound: { type: "int", editor_info: { type: "x", value: "mid_x-64" } },
    _x2_bound: { type: "int", editor_info: { type: "x", value: "mid_x+64" } },
    _y_bound: { type: "int", editor_info: { type: "y", value: "y-100" } },
    _y2_bound: { type: "int", editor_info: { type: "y", value: "y+100" } },
    mid_x_bound: "int :: (_x2_bound+_x_bound)/2",
    mid_y_bound: "int :: (_y2_bound+_y_bound)/2",
    force_x: { type: "int", editor_info: {type: "int", value: 900}, default: 900},
    force_y: { type: "int", editor_info: {type: "int", value: 900}, default: 1500},
    is_player_within_x_bounds: "bool :: (level.player.mid_x > _x_bound and level.player.mid_x <_x2_bound)",
    is_player_within_y_bounds: "bool :: (level.player.mid_y > _y_bound and level.player.mid_y <_y2_bound)",
    is_player_within_bounds:  "bool :: (is_player_within_x_bounds and is_player_within_y_bounds)",

},

on_create: "[
    set(draw_area, [
        _x_bound,
        _y_bound,
        (_x2_bound - _x_bound) / 2,
        (_y2_bound - _y_bound) / 2,
    ])
]",
on_start_level: "set_actA",

on_load: "    [
                set_actA,
            ]",
on_end_anim: "animation('normal')",

on_process: "[
    if(is_player_within_bounds and frogatto.is_currently_fat,
        [
            set(frogatto.velocity_x, frogatto.velocity_x-x_vel),
            set(frogatto.velocity_y, frogatto.velocity_y-y_vel),
            debug(x_vel, ' ', y_vel),
        ],
    )
    where x_vel = if(nx > 0.5, force_x*(nx*nx)-force_x*nx, force_x*nx-force_x*(nx*nx))
    where nx = decimal(frogatto.mid_x - _x_bound) / (_x2_bound - _x_bound)

    where y_vel = if(ny > 0.5, force_y*(ny*ny)-force_y*ny, force_y*ny-force_y*(ny*ny))
    where ny = decimal(frogatto.mid_y - _y_bound) / (_y2_bound - _y_bound)
    where frogatto = (obj frogatto_playable <- level.player)
    

    //debug((frogatto.mid_x-mid_x_bound) +x)
    //debug(frogatto.mid_x + 0.0/mid_x_bound)
    //debug(level.player.mid_x),
    //debug(_x2_bound-_x_bound),
    

    
]",

animation: {
    id: "normal",
    image: "effects/deaths-head.png",
    x: 0,
    y: 0,
    w: 16,
    h: 16,
    frames: 1,
    duration: 1000,
},
}
