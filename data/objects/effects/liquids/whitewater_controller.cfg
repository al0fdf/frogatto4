{
id: "whitewater_controller",
prototype: ["liquid"],
zorder: "@include data/zorder.cfg:in_front_of_everything",
hidden_in_game: true,
properties: {
	liquid_texture: "string :: 'liquids/whitewater-overlay.png'",
	liquid_damage: "kill_anything",
	surface_type: "string :: 'surface_wavy'",
	
	add_water_effect: "add_water(_x_bound, _y_bound, _x2_bound, _y2_bound, [140,00,0,70])",
	
	
#-------------------------- fx objects --------------------------#
	volume_bubbles: { 
		type: "obj particle_attache_slicer", 
		init: "object('particle_attache_slicer', x,y, {
			_particle_type:'bubbles_2', //Silence check for this existing. `particles`, which this sets, is overwritten later.
			parent: me,
			time_to_die: 0,
			x:x, y:y,
			zorder: lib.zorder.get('liquid_particle_effects'),
			child_system_count: child_system_count,
			slice_width: slice_width,
			water_width: water_width,
			water_height: water_height,
			water_boundaries: water_boundaries,
		})",
		persistent: false,
	},
	water_churn: { 
		type: "obj particle_attache_slicer", 
		init: "object('particle_attache_slicer', x,y, {
			_particle_type:'whitewater_churn_bubbles', //Silence check for this existing. `particles`, which this sets, is overwritten later.
			parent: me,
			time_to_die: 0,
			x:x, y:y,
			zorder: lib.zorder.get('liquid_particle_effects'),
			child_system_count: child_system_count,
			slice_width: slice_width,
			water_width: water_width,
			water_height: water_height,
			water_boundaries: water_boundaries,
		})",
		persistent: false,
	},



	underlay_obj: {
		type: "obj water_controller.underlay",
		init: "object('water_controller.underlay', mid_x, mid_y, { 
				parent: me,
				time_to_die: 50,
			})",
		persistent: false,
	},
	top_obj: {
		type: "obj whitewater_controller.top",
		init: "object('whitewater_controller.top', mid_x, mid_y, {
				parent: me,
				time_to_die: 50,
			})",
		persistent: false,
	},


#-------------------------- constructors --------------------------#
	liquid_obj_constructor: "commands :: [


		add_particle_effect ;
		setup_particles ;
		[
			setup_shader,
			add_object(underlay_obj),
			add_object(top_obj),
		]

	]",


	add_particle_effect: "[
		add_object(volume_bubbles),
		add_object(water_churn),
		add_particles('fizz'),
		add_particles('splash'),
		add_particles('splash_droplets'),
	]",



	setup_particles: "[

		map(
			volume_bubbles.active_child_systems,
			set(value.particles,
				(
					raw_particle_system_info + {
						position: [
							0,
							_y2_bound - mid_y, //Position the center point (of the box emitter) at the bottom of the body of water.
							0
						],
						fast_forward: (map <- raw_particle_system_info.fast_forward) + {
							time: bubble_average_lifetime, //Pump the water full of bubbles when we first encounter it.
						},
						emitter: (map <- raw_particle_system_info.emitter) + {
							time_to_live: bubble_average_lifetime, //Make the bubbles live until the top of the water.
							box_width: slice_width, //Make the bubbles as wide as the water. (To position the bubbles, see `position` above.)
							emission_rate: (map <- (map <- raw_particle_system_info.emitter).emission_rate) + {
								max: (10 * (_x2_bound - _x_bound) / 20) / slice_count, //Particle density. (Particles per pixel of water surface, divided by 2 on average because random floor is 0.)
							},
							scaling: {
								max: 10.0,
								min: 1.0,
								type: 'random',
							},
						},
					} where
						raw_particle_system_info = 
							(ParticleSystemInfo <- get_document('data/particles/bubbles_2.cfg')).info,
						bubble_average_lifetime = 
							(_y2_bound - _y_bound) / average_vertical_bubble_speed / 60/*fps*/
							where average_vertical_bubble_speed = 0.7 //as experimentally verified
				)
			)
		),

		;

		map(
			water_churn.active_child_systems,
			set(value.particles,
				(
					raw_particle_system_info + {
						position: [
							0,
							-(_y_bound - mid_y), //Position the center point (of the box emitter) at the top of the body of water. Less 4px to float on top of water surface.
							0
						],
						emitter: (map <- raw_particle_system_info.emitter) + {
							box_width: slice_width, //Make the bubbles as wide as the water. (To position the bubbles, see `position` above.) Less 64px for fade in/out margins.
							box_height: 18, //Make the bubbles as tall as the surface strip of water.
							emission_rate: (map <- (map <- raw_particle_system_info.emitter).emission_rate) + {
								max: ((_x2_bound - _x_bound) / 125) / slice_count, //Particle density. (Particles per pixel of water surface, divided by 2 on average because random floor is 0.)
							}
						},

					} where
						raw_particle_system_info = 
							(ParticleSystemInfo <- get_document('data/particles/whitewater_churn_bubbles.cfg')).info
				)
			)
		),



		if(particle_systems['fizz'], [
			set(particle_systems['fizz'].min_x, _x_bound - x),
			set(particle_systems['fizz'].max_x, _x2_bound - x),
			set(particle_systems['fizz'].min_y, (_y_bound - 15) - y),
			set(particle_systems['fizz'].max_y, (_y_bound + 60) - y),
			set(particle_systems['fizz'].spawn_rate, 4*(_x2_bound - _x_bound)),
		]),
		if(particle_systems['splash'], [
			set(particle_systems['splash'].min_x, _x_bound - x),
			set(particle_systems['splash'].max_x, _x2_bound - 54 - x),
			set(particle_systems['splash'].min_y, (_y_bound + 6) - y),
			set(particle_systems['splash'].max_y, (_y_bound + 6) - y),
			set(particle_systems['splash'].spawn_rate, 1*(_x2_bound - _x_bound)),
		]),
		if(particle_systems['splash_droplets'], [
			set(particle_systems['splash_droplets'].pos_x, _x_bound - x),
			set(particle_systems['splash_droplets'].pos_x_rand, _x2_bound - x),
			set(particle_systems['splash_droplets'].pos_y, (_y_bound) - y),
			set(particle_systems['splash_droplets'].pos_y_rand, (_y_bound) - y),
			set(particle_systems['splash_droplets'].generation_rate, 10*(_x2_bound - _x_bound))
		]),
	]",

},
	

	   
animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 147,
	y: 102,
	w: 28,
	h: 28,
	frames: 1,
	duration: 1000,
},

particle_system: [
	{
		id: "fizz",
		type: "simple",
		spawn_rate: 600,
		time_to_live: 48,
		min_x: -60,
		max_x: 260,
		min_y: -5,
		max_y: 15,
		velocity_y: -200,
		velocity_x: 260,
		velocity_x_random: 200,
		velocity_y_random: 400,

		#color=255,255,255,255
		animation: {
			id: "normal",
			image: "effects/water-splash.png",
			x: 120, y: 1, w: 37, h: 37,
			pad: 3,
			frames: 12,
			frames_per_row: 3,
			duration: 4,
		},
	},
	{
		id: "splash",
		type: "simple",
		spawn_rate: 600,
		time_to_live: 40,
		min_x: -60,
		max_x: 260,
		min_y: 0,
		max_y: 0,
		velocity_y: 0,
		velocity_x: 260,

		#color=255,255,255,255
		animation: {
			id: "normal",
			image: "effects/water-splash.png",
			x: 1, y: 1, w: 54, h: 38,
			pad: 3,
			frames: 10,
			frames_per_row: 2,
			duration: 4,
		},
	},
	{
		id: "splash_droplets",
		type: "point",
		generation_rate_millis: 0,
		time_to_live: 30,
		red: 255,
		green: 255,
		blue: 255,
		alpha: 255,
		dot_size: 1,
		pos_x: -10,
		pos_x_rand: 20,
		pos_y: -60,
		velocity_x: -2000,
		velocity_x_rand: 4000,
		velocity_y: -4500,
		velocity_y_rand: 2000,
		accel_y: 200000,
	},
],

object_type: [
	{
		id: "underlay",
		prototype: ["effects_attache"],
		zorder: "@include data/zorder.cfg:background_parallax_walls_further",
		properties: {

			do_setup: "[
				set(x,_parent_obj._x_bound),
				set(y,_parent_obj._y_bound),
				set(draw_area, [
					0,
					_offset, 
					abs(_parent_obj._x2_bound-_parent_obj._x_bound)/2, 
					abs(_parent_obj._y2_bound-_parent_obj._y_bound)/2
				]),
			] asserting _parent_obj is obj liquid",
			
			handle_specialized_processing: "[
				add(_offset,0.25),
				do_setup,
			]",

		#-------------------------- vars --------------------------#
			_offset: { type: "decimal", default: 0, persistent: false },
		},

		#we don't want to compile the image since we rely on it tiling.
		no_compile_image: "liquids/whitewater-underlay.png",
		animation: {
			image: "liquids/whitewater-underlay.png",
			id: "normal",
			x: 0,
			w: 256,
			y: 0,
			h: 256,
		},
	},
	{
		id: "top",
		prototype: ["effects_attache"],
		zorder: "@include data/zorder.cfg:exterior_near_background",
		properties: {
			
			do_setup: "[
				set(x, _parent_obj._x_bound),
				set(y, _parent_obj._y_bound - 18), //Final numeric offset sets the bottom of the surface of the water on the top of the water body. (-20 for top of the water body surface line, but in this case it wiggles around.)
				set(draw_area, [
					5.0*sin(_offset), 
					0, 
					abs(_parent_obj._x2_bound-_parent_obj._x_bound)/2, 
					img_h/2
				])
			] asserting _parent_obj is obj liquid",
			
			handle_specialized_processing: "[
				add(_offset,1.5),
				do_setup,
			]",

		#-------------------------- vars --------------------------#
			_offset: { type: "decimal", default: 0, persistent: false },
		},
		
		shader: {
			name: "waves",
			vertex: "
				uniform mat4 u_anura_mvp_matrix;
				attribute vec4 a_anura_vertex;
				attribute vec2 a_anura_texcoord;
				varying vec2 v_texcoord;
				void main() {
					gl_Position = u_anura_mvp_matrix * a_anura_vertex;
					v_texcoord = a_anura_texcoord;
				}
			",
			
			fragment: "
				uniform sampler2D u_tex_map;
				varying vec2 v_texcoord;
				uniform float u_anura_cycle;
				uniform vec4 u_anura_sprite_area;
				void main() {
					float offset = (
						+ sin(+u_anura_cycle/4.1 + v_texcoord[0]*50*1.0)*0.5  //loose wave travelling normally right
						+ sin(+u_anura_cycle/5.5 + v_texcoord[0]*50*1.2)*0.75 //tight wave travelling slowly left
						+ sin(-u_anura_cycle/1.7 + v_texcoord[0]*50*1.4)*0.75 //tight wave travelling quickly right
						+ sin(-u_anura_cycle/7.0 + v_texcoord[0]*50*2.1)*1.0  //flat wave travelling glacially left
						+ sin(-u_anura_cycle/0.5 + v_texcoord[0]*50*1.5)*0.5  //very small fast waves travelling right
					)/(u_anura_sprite_area[0]-u_anura_sprite_area[2])/20; //amplitude
					
					gl_FragColor = texture2D(u_tex_map, vec2(v_texcoord[0], clamp(v_texcoord[1] + (offset*(v_texcoord[1]*2-1)), .0, .999))); //[r,g,b,a], 0..1
					//gl_FragColor = texture2D(u_tex_map, v_texcoord);
					//gl_FragColor = vec4(v_texcoord[1],0,0,1);
				}
			",
		},


		#we don't want to compile the image since we rely on it tiling.
		no_compile_image: "liquids/toxic-acid-top.png",
		animation: {
			image: "liquids/whitewater-top.png",
			id: "normal",
			x: 0,
			w: 128,
			y: 0,
			h: 32,
		},
	},

	{
		"@merge": "@include data/object_prototypes/general/liquid.cfg:object_type[0]",
		id: "surface_wavy",
		on_done_create: "set(uv_segments, [img_w/if(LOW_END_SYSTEM, 18, 6), 1])",
		//on_process: "[debug('reloading'), fire_event('create')]", //TODO: Remove this, it's just for testing to fix live_reload.
		
		shader: {
			name: "waves",
			vertex: "
				uniform mat4 u_anura_mvp_matrix;
				attribute vec4 a_anura_vertex;
				attribute vec2 a_anura_texcoord;
				varying vec2 v_texcoord;
				uniform float u_anura_cycle;
				void main() {
					float offset = (
						+ sin(+u_anura_cycle/4.1 + a_anura_vertex[0]*1.0)*0.5  //loose wave travelling normally right
						+ sin(+u_anura_cycle/5.5 + a_anura_vertex[0]*1.2)*0.75 //tight wave travelling slowly left
						+ sin(-u_anura_cycle/1.7 + a_anura_vertex[0]*1.4)*0.75 //tight wave travelling quickly right
						+ sin(-u_anura_cycle/7.0 + a_anura_vertex[0]*2.1)*1.0  //flat wave travelling glacially left
						+ sin(-u_anura_cycle/0.5 + a_anura_vertex[0]*1.5)*0.5  //very small fast waves travelling right
					)/200; //amplitude
					gl_Position = u_anura_mvp_matrix * a_anura_vertex + vec4(0, offset, 0, 0);
					v_texcoord = a_anura_texcoord;
				}
			",

			fragment: "
				uniform sampler2D u_tex_map;
				varying vec2 v_texcoord;
				void main() {
					gl_FragColor = texture2D(u_tex_map, v_texcoord); //[r,g,b,a], 0..1
				}
			",
		},
	},

],

}