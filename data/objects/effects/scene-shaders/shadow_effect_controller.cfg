{
	id: "shadow_effect_controller",
	is_strict: true,
	always_active: true,
	hidden_in_game: true,
	zorder: "@include data/zorder.cfg:in_front_of_everything",
	scale: 8,

	editor_info: {
		category: "controllers",
		help: "A configurable shadow effect. This replaces\nthe old level properties dark and dark_color.",
	},

	properties: {
		//rain_texture: { type: "texture_object", init: "texture_object :: get_texture('raindrops3.png')", persistent: false },
		
		shadow_opacity: {
			type: "decimal",
			editor_info: {
				type: "decimal",
				value: 1.0,
				min_value: 0.0,
				max_value: 1.0,
			},
			init: "0.75"
		},
		
		//This exists to let something else - such as lights on the level, make the shadow less opaque.
		opacity_coefficient: {
			type: "decimal",
			init: "1.0",
		},
		
		reduce_shadow_opacity_in_editor: { type:"bool", default: false, editor_info: { type: "boolean", value: "false" } },
		
		final_shadow_opacity: "decimal :: shadow_opacity * opacity_coefficient
			* if(level.in_editor and reduce_shadow_opacity_in_editor, 0.65, 1)",
		
		
		shadow_color: {
			type: "{ r: decimal, g: decimal, b: decimal}",
			editor_info: {}, //force serialization when in the editor
			init: "{ r: 0.0, g: 0.0, b: 0.0}",
		},
		
		_light_sources_cache: { type: "object", init: "create_cache(1)", persistent: false },
		light_sources: "[obj light_source_attache] ::
			query_cache(
				_light_sources_cache,
				cycle,
				filter(level.active_chars, value is obj light_source_attache)
			)
		",
		
		light_at: "def(custom_obj|Point2d target) -> {obj: obj light_source_attache|null, strength: decimal}
			if(target_lit_by,
				target_lit_by[0], 
				{obj: null, strength: 0.0}
			)
			where target_lit_by = sort(
				filter(
					map(light_sources, {
						obj: (obj light_source_attache <- value), 
						strength: (obj light_source_attache <- value).light_amount_at(target),
					}),
					value.strength
				),
				a.strength > b.strength
			)
		",
	},
	
	events: {
		load: "
			//add the shader on creation.
			add(level.frame_buffer_shaders, [{
				label: 'shadow_effect',
				begin_zorder: lib.zorder.get('shadow_overlay'),
				end_zorder: lib.zorder.get('shadow_overlay'),
				shader_info: 'shadow',
			}])
		",
		//18, 2, 15 happens to be the RGB combo for our classic purple shadows
		
		process: "[
			[
				set((object<- (object<- shader.shader).uniform_commands).u_shadow_opacity, me.final_shadow_opacity),
				set((object<- (object<- shader.shader).uniform_commands).u_shadow_red, me.shadow_color.r),
				set((object<- (object<- shader.shader).uniform_commands).u_shadow_green, me.shadow_color.g),
				set((object<- (object<- shader.shader).uniform_commands).u_shadow_blue, me.shadow_color.b),
			]
			|
			shader <- level.frame_buffer_shaders,
				shader.shader_info = 'shadow',
				shader.begin_zorder = lib.zorder.get('shadow_overlay'),
				shader.end_zorder = lib.zorder.get('shadow_overlay')
		]",
		
		being_removed: "[
			//remove the shader when destroyed.
			set(level.frame_buffer_shaders, filter(level.frame_buffer_shaders, value.label != 'shadow_effect'))
		]",
		
		type_updated: "[
			fire_event('being_removed'),
			fire_event('create'),
		]",
	},
}

/*
	These values are read in from Anura; some are provided by the engine (essentially the hard-coded values without which it'd be impossible for this to run), any others which aren't are assumed to be provided by the object which instantiates this.
	
-- Rationale/Description:
	The loose way to understand how a shader works is that this fragment program we're building runs over every pixel independently.  Instead of one program running sequentially over the pixels, like reading a printed page in a book, instead the shader is written so that the every separate pixel can do its calculations COMPLETELY independently - and because of that, if the program truly is independent, then all of the pixels can get calculated in parallel.   Broadly speaking; this is the whole "point" of modern graphics cards.
	
	The "ingredients to work with" that each pixel gets are that image of the entire frame - and it should be noted that each pixel does NOT just get some optimized thing like small slice of it - no, they actually get the ENTIRE thing.  The trick here is that since it's immutable, it can be shared, and since it can be shared it's cheap - it'd be quite expensive if every one of these had to have its own copy.  Because it can get the whole thing, it's quite flexible in terms of what visual effects you can achieve - it's normal to make a lot of effects that only depend on immediately adjacent pixels, but the option is open for you to query anything, anywhere.
	
	Additionally, each pixel's shader gets its position.  This is the only thing that actually makes the program act on different pixels - the rest of the input to the shader is always identical (in addition to the shader code itself being identical).
	
-- Engine Provided Values:
	`v_texcoord` and `v_vertex` for example are provided by the engine, and represent the position value of the current texel (aka ~pixel), or vertex.  `v_texcoord` is provided as an [x,y] value in the source texture graphic.  `v_vertex` represents world-space, which in this context should be screen space.
	
	(Texels are a formal term for a likely-pixel-sized region in a source texture, which get thrown around as a concept in shaders because it's frequently critical to remember that you're working with things that are having their shape radically transformed/stretched/etc, and because you have some freedom to change just how you're sampling the original texture - in the case of most of Anura's shaders they're quite literally just an actual pixel in a rectangular source graphic.)
	
	`u_anura_tex_map` is a set of 4-element tuples; each of these tuples are of a type called `vec4` elements, which are basically an array of 4 floats.  These represent Red Green Blue Alpha.  The contents of this are, of course, an image - but specifically "an image of the game's current frame", sliced to whatever the specified zorders are.
	
	`uniform` means that each copy of the shader; each separate run of it that's happening on a different pixel, will always get the same value.  'varying' means it'll be different for every pixel.
	
-- Object-Provided Values:
	In order to have a value be provided by an object, we need to run a special command within the object.  For example, inside on_process:
	
	[
		set((object<- (object<- shader.shader).uniform_commands).u_shadow_opacity, 1.0)
		|
		shader <- level.frame_buffer_shaders,
			shader.shader_info = 'shadow',
			shader.begin_zorder = lib.zorder.get('shadow_overlay'),
			shader.end_zorder = lib.zorder.get('shadow_overlay')
	]
	
	The critical line we're looking at here is that `set(shader.shader).uniform_commands).u_shadow_opacity, number)` stuff on the first line - this is what gives this the unique name.  This name has to be matched here in the shader file.
	
*/

