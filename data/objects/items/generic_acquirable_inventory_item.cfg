{
id: "generic_acquirable_inventory_item",
prototype: ["item_acquirable"],
collide_dimensions: ["~item"],
is_strict: true,
traction_in_air: 1000,
properties: {
#-------------------------- cosmetic stuff --------------------------#
	display_description: "switch(true,
					true,
						speech_dialog(description_head,short_store_description,description_tail),
	)",
	
	description_head: "[~You just got the ${short_item_name}!~]",
	description_tail: "[
		~Check your inventory screen by pressing <em>${upper(level.player.get_key_for_input(enum button_open_inventory))}</em>\nin order to learn more!~
	]",
	
	do_starburst: "[spawn('silhouette_star.burst',mid_x,mid_y,1),map([0,0,0,0],spawn('coin_sparkle',midpoint_x + 1d40-20,midpoint_y + 1d40-20,0))]",

#-------------------------- item_acquirable overloads --------------------------#
	should_lock_player_and_do_fancy_acquisition_interlude: "true",
	do_screen_flash: "screen_flash([210,255,255,255],[0,0,0,-5], 51)",
	do_particle_fx: "do_starburst",

	acquisition_music_filename: "'specialitem.ogg'",

#-------------------------- vars --------------------------#
	kind: {
		type: "InventoryItemType",
	
		/*editor_info: {
			type: "InventoryItemTypePrimaryAttack",
			real_enum: true,
			enum_values: ["item_fire_breath_talisman", "item_energy_shot_talisman", "item_homing_shot_talisman", "item_acid_breath_talisman"],
			value: "enum energy_shot_talisman",
		},*/
		default: "@eval enum item_heart_container",
	},


#-------------------------- visual fx --------------------------#
	_particles: {
		type: "obj legacy_particle_attache",
		init: "object('legacy_particle_attache', mid_x, mid_y, {
			_particle_type: 'treasure_sparkle',
			zorder: me.zorder + 1,
			parent: me,
			time_to_die: 200,
			custom_relative_pos_default: {mid_x: 0, mid_y: 0},
			variable_name: '_particles',
		})",
		persistent: false,
	},


#-------------------------- general accessors --------------------------#
	frogatto: "(obj frogatto_playable <- level.player)",
	item_info: "class inventory_item :: frogatto.item_info(kind)",

	short_item_name: "string :: lower(item_info.name)",
	short_store_description: "[string] :: store_description_override",



	/*
		We need to have a special line of dialogue sometimes, depending on items you've got.  For example, when you get a partial heart container, we want the default line when you get only part of the whole thing, but we want a special line of dialogue right when you manage to complete the set and make a full heart.

		TODO Dirty hack here:  ideally it might be better to put this in the items.cfg `description` field, but that would necessitate a pretty dangerous conversion of that type from a string to a function taking the player object as a parameter, followed by a string.
	*/
	store_description_override: "[string] ::
		switch(me.kind,
			enum item_partial_heart_container,  if( level.player.number_of_item(enum item_partial_heart_container) >= 3,  
					[~You've completed an entire heart!~],
					item_info.short_store_description
				),
			item_info.short_store_description
		)
	",



	icon_animation: "map ::
		{
			id: 'custom', 
			image: item_info.anim_image,
			frames: item_info.anim_frame_count,
			duration: 6,
			pad: 3,
			scale: 3,
			rect: item_info.anim_rect,
			no_remove_alpha_borders: true,
			item_area: 'all',
		}
	",

},
on_create: "[
				set(animation,icon_animation),
				add_object(_particles)
			]",
on_end_anim: "set(animation, icon_animation)",

on_acquired: "[display_description, level.player.add_item(self.kind, 1) asserting level.player is obj frogatto_playable]",
	
animation: [{
	"@base": true,
	no_remove_alpha_borders: true,
	image: "props/store-items.png",
	frames: 6,
	duration: 6,
	pad: 3,
	scale: 3,
	item_area: "all",
}],

}
